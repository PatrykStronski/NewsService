var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AdminActivateGuard.html",[0,1.941,1,2.149]],["body/guards/AdminActivateGuard.html",[1,2.942,2,2.168,3,0.319,4,0.319,5,0.281,6,3.743,7,2.43,8,0.208,9,1.388,10,1.833,11,4.014,12,1.636,13,2.43,14,2.288,15,0.603,16,3.314,17,1.615,18,0.03,19,1.615,20,0.488,21,1.287,22,3.298,23,4.014,24,3.314,25,2.43,26,1.023,27,2.422,28,0.663,29,1.104,30,1.636,31,0.879,32,2.168,33,1.636,34,1.023,35,1.885,36,1.959,37,0.319,38,0.014,39,1.959,40,1.19,41,1.833,42,1.959,43,2.43,44,1.885,45,2.168,46,2.042,47,1.885,48,3.298,49,3.298,50,3.298,51,2.658,52,1.19,53,2.43,54,2.43,55,2.43,56,2.43,57,1.103,58,1.959,59,0.02,60,0.02]],["title/controllers/AppController.html",[61,1.377,62,2.149]],["body/controllers/AppController.html",[3,0.412,4,0.412,5,0.362,8,0.268,9,1.637,15,0.573,18,0.029,26,1.318,28,0.642,31,1.133,37,0.412,38,0.018,40,1.534,57,1.422,59,0.023,60,0.023,61,2.223,62,3.47,63,2.3,64,3.585,65,6.031,66,1.133,67,4.271,68,1.111,69,3.106,70,3.585,71,4.271]],["title/modules/AppModule.html",[72,2.409,73,2.149]],["body/modules/AppModule.html",[3,0.291,4,0.291,5,0.256,14,2.223,18,0.03,28,0.763,31,0.8,32,1.974,37,0.291,38,0.013,59,0.019,60,0.019,62,3.179,63,2.27,69,3.088,70,2.532,72,3.563,73,4.227,74,2.213,75,1.974,76,2.532,77,2.532,78,1.974,79,4.077,80,2.532,81,2.532,82,2.532,83,3.088,84,3.088,85,2.604,86,2.604,87,3.538,88,2.532,89,2.532,90,3.017,91,3.179,92,3.179,93,3.179,94,3.017,95,3.017,96,3.017,97,3.017,98,3.017,99,2.532,100,3.017,101,3.017,102,2.213,103,3.017,104,3.017,105,3.017]],["title/injectables/AppService.html",[29,0.806,69,1.769]],["body/injectables/AppService.html",[3,0.362,4,0.362,5,0.318,8,0.235,9,1.507,10,1.949,12,1.852,15,0.655,17,1.347,18,0.029,19,1.347,20,0.407,21,1.073,26,1.158,28,0.657,29,1.199,31,0.995,33,1.852,34,1.158,37,0.362,38,0.016,39,2.218,40,1.347,41,1.347,52,1.347,55,2.751,57,1.249,59,0.021,60,0.021,69,2.63,86,2.612,99,3.148,106,1.852,107,2.751,108,6.112,109,3.751,110,3.751,111,3.751,112,2.021,113,2.751,114,0.995,115,2.751,116,1.852,117,3.148,118,1.347,119,2.455,120,1.454,121,1.454,122,3.148,123,3.751,124,3.751]],["title/classes/AuthBodyDto.html",[38,0.014,125,1.621]],["body/classes/AuthBodyDto.html",[3,0.372,4,0.372,5,0.327,8,0.242,15,0.667,18,0.029,20,0.54,28,0.467,37,0.53,38,0.025,59,0.022,60,0.022,66,1.319,68,1.33,114,1.595,118,2.087,125,2.455,126,1.386,127,2.525,128,1.319,129,2.969,130,3.859,131,2.332,132,3.859,133,3.647,134,1.386,135,2.078,136,1.905,137,0.876,138,2.078,139,1.618]],["title/controllers/AuthController.html",[61,1.377,91,2.149]],["body/controllers/AuthController.html",[3,0.274,4,0.274,5,0.241,8,0.178,9,1.247,10,2.16,14,1.823,15,0.631,17,1.689,18,0.03,19,1.689,20,0.51,21,1.346,26,1.451,27,2.759,28,0.681,30,1.403,31,0.754,36,1.68,37,0.274,38,0.012,40,1.021,41,1.689,44,1.694,51,1.68,52,1.839,57,1.345,59,0.018,60,0.018,61,1.191,63,1.531,66,1.247,83,2.533,86,2.136,91,2.644,125,2.528,135,2.759,136,1.403,138,2.759,139,1.694,140,2.385,141,2.084,142,4.703,143,2.842,144,4.042,145,2.842,146,3.42,147,2.842,148,4.042,149,2.842,150,2.842,151,4.042,152,2.842,153,2.842,154,1.531,155,2.842,156,2.385,157,2.842,158,2.842,159,2.842,160,2.964,161,2.842,162,2.644,163,4.042,164,2.842,165,2.842,166,3.392,167,2.842,168,2.842,169,2.842,170,2.842,171,2.842,172,2.842]],["title/injectables/CodesService.html",[29,0.806,83,1.769]],["body/injectables/CodesService.html",[3,0.26,4,0.26,5,0.229,8,0.169,9,1.202,10,2.046,12,1.333,15,0.712,17,1.641,18,0.03,19,1.641,20,0.496,21,1.308,26,1.544,27,2.098,28,0.606,29,0.956,30,1.333,31,0.716,37,0.26,38,0.012,40,0.97,41,1.905,46,1.226,47,1.132,52,0.97,57,0.899,59,0.017,60,0.017,66,0.716,68,0.816,83,2.098,85,2.273,102,1.98,106,1.333,114,0.716,136,2.812,137,1.293,173,1.98,174,4.57,175,5.003,176,3.896,177,3.896,178,1.98,179,2.7,180,2.549,181,2.7,182,2.7,183,2.7,184,3.896,185,2.7,186,2.857,187,2.7,188,2.7,189,2.266,190,2.7,191,3.269,192,1.98,193,2.857,194,3.269,195,1.98,196,2.266,197,1.98,198,2.857,199,3.896,200,2.7,201,2.7,202,3.896,203,2.7,204,2.7,205,2.7,206,2.7,207,2.7,208,2.7,209,2.7,210,2.7,211,2.7,212,2.7,213,2.7,214,1.767,215,2.7,216,2.7,217,3.896,218,2.7,219,3.896]],["title/interfaces/IPayload.html",[35,1.377,220,1.941]],["body/interfaces/IPayload.html",[3,0.395,4,0.395,5,0.347,8,0.256,18,0.029,20,0.614,35,2.164,37,0.545,44,1.716,59,0.023,60,0.023,68,1.346,114,1.575,120,2.303,128,1.369,137,1.284,139,2.164,154,2.204,220,3.052,221,3.002,222,2.678,223,3.512,224,3.435,225,2.678,226,3.002]],["title/interfaces/IToken.html",[154,1.769,220,1.941]],["body/interfaces/IToken.html",[3,0.402,4,0.402,5,0.354,8,0.261,18,0.029,20,0.567,21,1.495,35,1.749,37,0.55,44,2.507,59,0.023,60,0.023,68,1.351,114,1.106,120,1.618,128,1.386,137,0.947,139,2.582,154,2.815,220,3.089,221,3.06,222,2.73,223,2.466,224,3.501,225,2.73,226,3.06]],["title/guards/ModeratorActivateGuard.html",[0,1.941,227,2.149]],["body/guards/ModeratorActivateGuard.html",[2,2.142,3,0.316,4,0.316,5,0.277,8,0.205,9,1.376,10,1.821,11,3.994,12,1.616,13,2.401,14,2.279,15,0.598,17,1.601,18,0.029,19,1.601,20,0.484,21,1.276,22,3.27,23,3.994,25,2.401,26,1.01,27,2.402,28,0.659,29,1.095,30,1.616,31,0.868,32,2.142,33,1.616,34,1.01,35,1.869,36,1.935,37,0.316,38,0.014,39,1.935,40,1.175,41,1.821,42,1.935,43,2.401,44,2.126,45,2.142,46,2.025,47,1.869,48,2.401,49,2.401,50,2.401,51,2.636,52,1.175,53,2.401,54,2.401,56,2.401,57,1.09,58,1.935,59,0.02,60,0.02,227,2.918,228,3.719,229,3.719,230,2.747,231,3.273,232,3.273,233,2.401,234,3.273,235,3.273,236,3.273]],["title/controllers/NewsController.html",[61,1.377,93,2.149]],["body/controllers/NewsController.html",[0,1.355,3,0.221,4,0.221,5,0.194,8,0.144,9,1.066,10,2.209,14,1.61,15,0.666,17,1.781,18,0.03,19,1.781,20,0.639,21,1.419,26,1.53,28,0.655,31,0.608,37,0.221,38,0.01,40,0.823,41,1.24,42,3.197,44,0.961,45,1.5,52,0.823,57,1.651,59,0.015,60,0.015,61,0.961,63,1.235,66,1.315,68,0.87,84,2.237,93,2.259,141,1.681,146,1.355,156,1.924,160,1.681,186,2.532,227,1.5,228,1.681,229,1.681,237,1.924,238,3.046,239,3.453,240,3.453,241,3.453,242,2.898,243,3.453,244,2.293,245,2.282,246,2.293,247,2.293,248,3.245,249,2.293,250,4.374,251,2.293,252,2.293,253,4.779,254,2.293,255,2.282,256,2.293,257,2.293,258,2.532,259,2.293,260,2.293,261,2.293,262,2.293,263,2.282,264,2.293,265,2.293,266,4.154,267,1.924,268,1.924,269,1.924,270,2.898,271,3.453,272,1.924,273,2.293,274,1.924,275,1.5,276,1.681,277,1.924,278,1.681,279,2.293,280,1.924,281,4.154,282,2.293,283,2.293,284,2.293,285,3.453,286,2.293,287,2.293,288,2.293,289,2.293,290,4.154,291,2.293,292,2.293,293,2.293,294,2.293,295,2.293,296,2.293,297,2.293]],["title/classes/NewsInputDto.html",[38,0.014,245,1.621]],["body/classes/NewsInputDto.html",[3,0.324,4,0.324,5,0.285,8,0.211,15,0.739,18,0.029,20,0.598,28,0.55,34,1.039,37,0.496,38,0.024,59,0.02,60,0.02,66,1.46,68,1.308,121,2.135,126,1.208,128,1.205,131,2.447,134,1.208,137,1.031,245,2.243,255,1.661,263,1.661,298,2.202,299,4.039,300,3.256,301,4.039,302,3.365,303,3.365,304,4.039,305,3.773,306,3.365,307,3.365,308,1.661,309,2.991,310,2.539,311,2.202,312,1.411]],["title/classes/NewsModificationDto.html",[38,0.014,263,1.621]],["body/classes/NewsModificationDto.html",[3,0.324,4,0.324,5,0.285,8,0.211,15,0.739,18,0.029,20,0.598,28,0.55,34,1.039,37,0.496,38,0.024,59,0.02,60,0.02,66,1.46,68,1.308,121,2.135,126,1.208,128,1.205,131,2.349,134,1.208,137,1.031,245,1.661,255,1.661,263,2.243,298,2.202,299,4.039,300,3.256,301,4.039,304,4.039,305,3.332,308,1.661,309,2.991,310,2.539,311,2.202,312,1.411,313,5.144,314,3.365,315,3.365,316,3.365,317,3.365,318,3.365]],["title/classes/NewsPagination.html",[38,0.014,255,1.621]],["body/classes/NewsPagination.html",[3,0.346,4,0.346,5,0.304,8,0.225,15,0.637,18,0.029,20,0.515,28,0.574,34,1.108,37,0.512,38,0.024,59,0.021,60,0.021,66,1.258,68,1.265,121,1.839,126,1.289,128,1.258,131,2.387,134,1.289,137,1.283,245,1.772,255,2.341,263,1.772,298,2.348,299,3.479,300,2.804,301,3.479,304,3.896,305,3.479,308,1.772,309,3.039,310,2.622,311,3.476,312,2.227,319,3.981,320,3.589,321,3.589]],["title/injectables/NewsService.html",[29,0.806,84,1.769]],["body/injectables/NewsService.html",[3,0.207,4,0.207,5,0.182,8,0.135,9,1.015,10,2.183,12,1.062,15,0.682,17,1.826,18,0.03,19,1.826,20,0.552,21,1.455,26,1.488,28,0.484,29,0.808,31,0.57,37,0.207,38,0.009,40,0.772,41,1.434,46,2.309,47,1.675,52,1.731,57,1.489,59,0.014,60,0.014,84,1.772,85,2.032,106,1.062,137,1.336,178,1.577,180,2.153,192,1.577,198,1.577,214,2.614,223,3.006,238,2.93,242,2.761,245,2.208,248,2.928,255,2.208,258,2.413,263,2.208,274,1.805,311,2.153,312,1.876,322,1.577,323,3.29,324,3.29,325,3.29,326,3.29,327,2.151,328,3.29,329,4.474,330,2.151,331,4.44,332,3.29,333,2.151,334,3.29,335,2.151,336,3.29,337,2.151,338,3.29,339,2.151,340,1.577,341,1.577,342,3.536,343,1.805,344,2.151,345,2.151,346,2.151,347,2.151,348,2.93,349,2.93,350,2.151,351,2.93,352,3.88,353,2.151,354,2.151,355,2.761,356,2.761,357,2.413,358,2.151,359,2.151]],["title/classes/PaginationInput.html",[38,0.014,360,1.621]],["body/classes/PaginationInput.html",[3,0.333,4,0.333,5,0.292,8,0.216,15,0.62,18,0.029,20,0.501,21,1.592,28,0.56,33,2.572,34,1.065,37,0.536,38,0.025,59,0.02,60,0.02,66,1.225,68,1.251,112,2.806,114,1.382,116,1.704,118,1.239,120,1.792,121,1.792,126,1.239,128,1.225,129,2.747,131,1.792,134,1.239,137,1.263,308,1.704,309,2.572,310,2.572,312,2.184,319,3.879,360,2.281,361,2.04,362,3.08,363,3.451,364,3.451,365,3.024,366,1.568,367,3.024,368,1.859,369,1.568,370,1.568,371,2.258]],["title/injectables/PrismaService.html",[29,0.806,85,1.492]],["body/injectables/PrismaService.html",[3,0.41,4,0.41,5,0.361,8,0.267,9,1.633,10,2.067,15,0.571,18,0.029,26,1.313,28,0.641,29,1.299,31,1.128,34,1.313,37,0.41,38,0.018,39,2.515,52,1.528,59,0.023,60,0.023,85,2.403,106,2.1,372,3.57,373,5.29,374,5.757,375,6.315,376,4.254,377,4.254]],["title/classes/RefreshBodyDto.html",[38,0.014,138,1.769]],["body/classes/RefreshBodyDto.html",[3,0.372,4,0.372,5,0.327,8,0.242,15,0.667,18,0.029,20,0.54,28,0.467,37,0.53,38,0.025,59,0.022,60,0.022,66,1.319,68,1.33,114,1.595,118,1.786,125,1.905,126,1.386,127,2.525,128,1.319,129,2.969,131,2.332,133,3.647,134,1.386,135,2.078,136,1.905,137,0.876,138,2.678,139,2.307,378,3.859,379,3.859]],["title/classes/TokenBodyDto.html",[38,0.014,135,1.769]],["body/classes/TokenBodyDto.html",[3,0.359,4,0.359,5,0.316,8,0.233,15,0.726,18,0.029,20,0.587,28,0.451,37,0.522,38,0.025,59,0.021,60,0.021,66,1.435,68,1.32,114,1.577,118,2.059,125,1.839,126,1.338,127,2.438,128,1.289,129,2.936,131,2.306,133,3.968,134,1.338,135,2.618,136,2.671,137,1.103,138,2.007,139,1.562,380,3.725,381,3.725,382,3.725]],["title/injectables/TokenService.html",[14,1.273,29,0.806]],["body/injectables/TokenService.html",[3,0.177,4,0.177,5,0.155,8,0.115,9,0.896,14,1.126,15,0.669,17,1.606,18,0.03,19,1.709,20,0.578,21,1.28,26,1.381,28,0.542,29,0.713,30,2.208,31,0.486,35,2.09,37,0.177,38,0.008,41,1.606,42,2.645,44,2.374,46,2.265,47,2.09,51,3.149,54,1.344,57,1.489,59,0.013,60,0.016,68,1.22,106,0.905,114,1.322,120,0.711,128,0.77,137,0.659,139,1.995,146,1.084,154,2.41,160,3.49,162,1.199,214,2.927,225,1.199,233,1.344,278,1.344,351,3.281,352,3.281,383,1.538,384,3.608,385,3.608,386,2.905,387,2.905,388,2.905,389,2.905,390,2.905,391,2.905,392,1.833,393,2.905,394,1.833,395,3.608,396,2.905,397,1.833,398,2.905,399,1.833,400,2.905,401,1.833,402,2.13,403,2.13,404,2.905,405,4.104,406,1.833,407,2.905,408,1.833,409,1.833,410,1.833,411,2.905,412,1.538,413,1.833,414,3.608,415,1.833,416,4.104,417,3.608,418,3.608,419,3.608,420,2.905,421,3.608,422,2.905,423,1.833,424,3.755,425,3.444,426,3.608,427,1.833,428,1.833,429,1.833,430,1.833,431,1.833,432,1.833,433,1.833,434,2.905,435,1.833,436,1.833,437,1.833,438,1.833,439,1.833,440,1.833]],["title/guards/UserActivateGuard.html",[0,1.941,275,2.149]],["body/guards/UserActivateGuard.html",[2,2.258,3,0.333,4,0.333,5,0.292,7,2.531,8,0.216,9,1.426,10,1.871,11,4.081,12,1.704,13,2.531,14,2.315,15,0.62,17,1.659,18,0.029,19,1.659,20,0.501,21,1.322,22,3.389,23,4.081,25,2.531,26,1.065,27,2.489,28,0.631,29,1.134,30,1.704,31,0.915,32,2.258,35,1.937,36,2.04,37,0.333,38,0.015,39,2.04,40,1.239,41,1.871,42,2.04,43,2.531,44,1.937,45,2.258,46,1.568,47,1.447,48,2.531,49,2.531,50,2.531,51,2.732,52,1.239,53,2.531,56,2.531,57,1.149,58,2.04,59,0.02,60,0.02,275,3.024,276,3.821,441,3.451,442,3.451]],["title/controllers/UserController.html",[61,1.377,92,2.149]],["body/controllers/UserController.html",[1,1.391,3,0.205,4,0.205,5,0.18,6,1.559,8,0.133,9,1.006,10,2.227,15,0.679,17,1.817,18,0.029,19,1.817,20,0.617,21,1.448,26,1.626,28,0.538,31,0.564,37,0.205,38,0.009,40,0.763,41,1.171,46,0.965,47,0.891,52,1.817,57,1.684,59,0.014,60,0.014,61,0.891,63,1.145,66,1.342,68,0.683,86,1.801,92,2.133,136,1.609,141,1.559,146,2.629,162,3.647,186,2.391,248,3.311,250,3.732,253,4.247,258,2.391,267,4.025,268,1.784,269,1.784,270,2.736,272,1.784,277,1.784,280,1.784,300,1.927,340,1.559,341,1.559,348,1.559,349,1.559,357,1.559,360,2.195,366,2.02,369,2.02,370,2.02,443,1.784,444,3.26,445,3.26,446,3.26,447,3.26,448,3.26,449,2.126,450,2.126,451,2.126,452,2.126,453,2.126,454,2.126,455,3.26,456,2.126,457,2.126,458,2.126,459,3.26,460,2.126,461,2.126,462,2.126,463,2.126,464,2.126,465,2.126,466,2.126,467,2.126,468,2.126,469,3.26,470,3.26,471,4.447,472,3.26,473,3.26,474,2.126,475,1.784,476,2.126,477,2.126,478,2.126,479,2.126,480,5.061,481,2.126,482,3.26,483,2.126,484,2.126,485,2.126,486,2.126,487,2.126,488,2.126,489,2.126,490,2.126,491,2.126,492,2.126,493,2.126,494,2.126,495,2.126,496,2.126,497,2.126,498,2.126,499,2.126,500,2.126]],["title/classes/UserInput.html",[38,0.014,366,1.492]],["body/classes/UserInput.html",[3,0.3,4,0.3,5,0.264,8,0.195,15,0.777,18,0.029,20,0.628,21,1.525,28,0.522,33,2.631,34,0.961,37,0.514,38,0.024,59,0.019,60,0.019,66,1.414,68,1.302,112,2.871,114,1.484,116,2.438,118,1.774,120,2.067,121,2.067,126,1.118,128,1.142,129,2.762,131,1.915,134,1.118,137,0.978,308,1.536,309,2.438,310,2.438,312,1.305,360,1.536,361,1.84,362,1.84,365,3.232,366,1.957,367,3.232,368,2.661,369,1.414,370,1.414,371,2.037,501,3.113,502,3.113,503,3.113,504,3.113,505,3.113,506,3.113]],["title/classes/UserRoleEdit.html",[38,0.014,369,1.492]],["body/classes/UserRoleEdit.html",[3,0.337,4,0.337,5,0.296,8,0.219,15,0.626,18,0.029,20,0.506,28,0.564,33,2.761,34,1.079,37,0.539,38,0.025,59,0.021,60,0.021,66,1.236,68,1.282,112,2.824,114,1.545,116,1.726,118,1.255,120,2.169,121,1.807,126,1.255,128,1.236,129,2.876,131,1.807,134,1.255,137,1.058,308,1.726,309,2.588,310,2.588,312,1.466,360,1.726,361,2.067,362,2.067,365,3.05,366,1.588,367,3.431,368,1.883,369,2.117,370,1.588,371,2.288,507,3.496,508,3.496]],["title/injectables/UserService.html",[29,0.806,86,1.492]],["body/injectables/UserService.html",[3,0.128,4,0.128,5,0.113,8,0.084,9,0.691,10,2.169,12,0.658,15,0.659,17,1.762,18,0.03,19,1.762,20,0.533,21,1.404,26,1.466,27,2.643,28,0.527,29,0.55,30,1.674,31,0.353,34,0.411,35,0.559,36,0.788,37,0.128,38,0.006,40,0.479,41,1.64,46,2.346,47,1.991,52,1.892,57,1.52,58,2.235,59,0.01,60,0.01,68,0.606,85,1.54,86,1.017,106,0.658,112,0.718,114,1.301,116,1.429,118,1.218,119,1.894,120,1.315,121,0.868,125,1.674,137,1.037,146,1.323,162,3.301,166,1.879,178,0.977,180,1.465,189,1.118,192,0.977,214,2.219,223,2.808,233,0.977,248,1.894,312,1.422,331,3.173,340,0.977,341,0.977,348,2.123,349,2.123,351,2.487,352,3.192,355,2.429,356,2.429,357,2.123,362,1.711,366,1.977,368,2.344,369,1.54,370,1.54,402,0.977,403,0.977,424,1.118,425,2.429,475,1.118,509,0.977,510,2.239,511,2.239,512,2.239,513,2.239,514,2.239,515,2.239,516,2.239,517,2.239,518,1.333,519,2.239,520,1.333,521,1.333,522,2.239,523,1.333,524,2.239,525,1.333,526,2.239,527,1.333,528,2.239,529,1.333,530,2.239,531,1.333,532,2.239,533,1.333,534,1.333,535,1.333,536,2.239,537,1.333,538,1.879,539,2.123,540,1.333,541,1.333,542,1.333,543,1.118,544,1.333,545,0.977,546,3.003,547,1.879,548,2.895,549,3.781,550,1.333,551,2.239,552,1.333,553,2.239,554,2.239,555,1.333,556,1.333,557,1.333,558,2.239,559,1.333,560,1.333,561,1.333,562,1.333,563,1.333,564,2.239,565,3.391,566,1.333,567,2.895,568,1.333,569,1.333,570,1.333,571,1.333,572,1.333,573,1.333,574,2.239,575,1.333,576,1.333,577,2.239,578,2.239,579,2.239,580,2.239,581,1.333,582,1.333,583,1.333,584,1.333,585,1.333,586,1.333,587,1.333,588,1.333,589,1.333]],["title/classes/UserStatusEdit.html",[38,0.014,370,1.492]],["body/classes/UserStatusEdit.html",[3,0.337,4,0.337,5,0.296,8,0.219,15,0.626,18,0.029,20,0.506,28,0.564,33,2.588,34,1.079,37,0.539,38,0.025,59,0.021,60,0.021,66,1.236,68,1.282,112,3.013,114,1.545,116,1.726,118,1.255,120,1.807,121,2.169,126,1.255,128,1.236,129,2.876,131,1.807,134,1.255,137,1.058,308,1.726,309,2.588,310,2.588,312,1.466,360,1.726,361,2.067,362,2.067,365,3.05,366,1.588,367,3.05,368,1.883,369,1.588,370,2.117,371,3.05,590,3.496,591,3.496]],["title/coverage.html",[592,3.751]],["body/coverage.html",[0,2.635,1,1.69,5,0.219,6,1.895,7,2.767,14,1.002,18,0.029,20,0.28,29,1.336,35,1.083,38,0.026,47,1.083,59,0.017,60,0.017,61,2.055,62,1.69,64,2.168,69,1.392,78,1.69,83,1.392,84,1.392,85,1.173,86,1.173,91,1.69,92,1.69,93,1.69,107,2.767,113,1.895,125,1.275,127,2.916,135,1.392,138,1.392,140,2.168,154,1.392,173,3.594,193,1.895,195,1.895,197,1.895,198,4.876,220,2.23,222,2.469,227,1.69,228,1.895,229,1.895,230,2.168,237,2.168,245,1.275,255,1.275,263,1.275,275,1.69,276,1.895,298,2.916,322,2.767,342,1.895,360,1.275,361,2.897,366,1.173,369,1.173,370,1.173,372,2.168,383,2.168,443,2.168,509,3.269,539,1.895,546,1.895,592,2.168,593,2.584,594,2.584,595,2.584,596,3.773,597,6.053,598,5.622,599,5.763,600,4.457,601,3.773,602,2.168,603,2.584,604,3.773,605,4.457,606,2.584,607,2.584,608,2.584,609,2.584]],["title/dependencies.html",[75,2.582,610,2.307]],["body/dependencies.html",[18,0.03,31,1.115,34,1.298,38,0.022,59,0.023,60,0.023,75,2.751,102,3.084,134,1.51,180,2.751,191,3.529,278,3.084,412,3.529,543,3.529,611,5.726,612,4.205,613,4.205,614,4.205,615,5.251,616,4.205,617,4.205,618,4.205,619,4.205,620,4.205,621,4.205,622,4.205,623,4.205,624,4.205,625,4.205,626,4.205,627,4.205,628,4.205,629,4.205,630,4.205]],["title/miscellaneous/enumerations.html",[631,1.481,632,3.312]],["body/miscellaneous/enumerations.html",[8,0.314,18,0.026,59,0.026,60,0.026,139,2.098,222,3.274,225,3.817,226,3.67,631,2.695,632,4.2,633,5.004]],["title/miscellaneous/functions.html",[631,1.481,634,3.312]],["body/miscellaneous/functions.html",[8,0.315,18,0.026,59,0.026,60,0.026,78,4.048,602,4.219,631,2.708,634,4.219,635,5.027]],["title/index.html",[8,0.172,636,2.749,637,2.749]],["body/index.html",[18,0.03,44,1.627,59,0.017,60,0.017,114,1.324,115,3.661,118,1.394,119,2.982,136,1.326,139,1.91,238,2.847,638,3.882,639,2.687,640,4.557,641,4.557,642,3.882,643,2.687,644,2.687,645,2.687,646,2.687,647,2.687,648,2.687]],["title/modules.html",[74,3.278]],["body/modules.html",[18,0.026,59,0.026,60,0.026,73,3.32,74,3.722,649,5.075,650,5.075,651,5.075,652,5.075]],["title/overview.html",[653,3.751]],["body/overview.html",[2,2.609,14,2.166,18,0.028,59,0.022,60,0.022,63,2.147,69,3.01,72,3.724,73,4.341,75,2.609,76,3.346,77,3.346,78,2.609,79,3.346,80,3.346,81,3.346,82,3.346,83,3.01,84,3.01,85,2.538,86,2.538,87,4.262,88,3.346,89,3.346,106,1.968,126,1.432,221,2.924,538,3.346,545,2.924,653,3.346,654,3.987,655,3.987,656,3.987,657,3.987]],["title/properties.html",[128,1.046,610,2.307]],["body/properties.html",[18,0.029,59,0.026,60,0.026,128,1.315,300,2.931,658,4.958,659,4.958,660,4.958,661,4.958,662,4.958]],["title/miscellaneous/variables.html",[631,1.481,663,3.312]],["body/miscellaneous/variables.html",[8,0.218,18,0.029,20,0.663,55,2.556,58,3.441,59,0.02,60,0.02,107,2.556,113,3.411,114,1.233,115,2.556,116,2.296,117,2.925,118,1.67,119,2.28,120,1.803,121,1.803,122,2.925,137,1.321,173,2.556,193,3.411,194,3.904,195,3.411,196,2.925,197,3.411,223,2.06,322,2.556,342,3.411,343,2.925,368,1.877,402,4.483,403,4.483,509,2.556,539,3.411,545,2.556,546,3.411,547,3.904,631,1.877,663,2.925,664,3.485,665,5.235,666,4.651,667,3.485,668,4.651]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":198,"title":{},"body":{"injectables/CodesService.html":{},"injectables/NewsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":659,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":538,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{}}}],["10",{"_index":545,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":343,"title":{},"body":{"injectables/NewsService.html":{},"miscellaneous/variables.html":{}}}],["1000000",{"_index":199,"title":{},"body":{"injectables/CodesService.html":{}}}],["120",{"_index":196,"title":{},"body":{"injectables/CodesService.html":{},"miscellaneous/variables.html":{}}}],["1d",{"_index":423,"title":{},"body":{"injectables/TokenService.html":{}}}],["1h",{"_index":420,"title":{},"body":{"injectables/TokenService.html":{}}}],["2",{"_index":657,"title":{},"body":{"overview.html":{}}}],["2.13.0",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["202",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["3",{"_index":656,"title":{},"body":{"overview.html":{}}}],["4",{"_index":654,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":194,"title":{},"body":{"injectables/CodesService.html":{},"miscellaneous/variables.html":{}}}],["5.0.2",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["5.7.1",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":655,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["99812312312",{"_index":117,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["activate",{"_index":229,"title":{},"body":{"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"coverage.html":{}}}],["activate.guard",{"_index":277,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["activate.guard.ts",{"_index":7,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/UserActivateGuard.html":{},"coverage.html":{}}}],["activate.guard.ts:11",{"_index":441,"title":{},"body":{"guards/UserActivateGuard.html":{}}}],["activate.guard.ts:12",{"_index":16,"title":{},"body":{"guards/AdminActivateGuard.html":{}}}],["activate.guard.ts:14",{"_index":442,"title":{},"body":{"guards/UserActivateGuard.html":{}}}],["activate.guard.ts:15",{"_index":24,"title":{},"body":{"guards/AdminActivateGuard.html":{}}}],["addnews",{"_index":239,"title":{},"body":{"controllers/NewsController.html":{}}}],["addnews(@body",{"_index":282,"title":{},"body":{"controllers/NewsController.html":{}}}],["addnews(news",{"_index":244,"title":{},"body":{"controllers/NewsController.html":{}}}],["admin",{"_index":119,"title":{},"body":{"injectables/AppService.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["admin.email",{"_index":588,"title":{},"body":{"injectables/UserService.html":{}}}],["admin.password",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["admin.salt",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["admin@admin.admin",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["admin_data",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminactivateguard",{"_index":1,"title":{"guards/AdminActivateGuard.html":{}},"body":{"guards/AdminActivateGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["administrator",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["adn",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["again",{"_index":215,"title":{},"body":{"injectables/CodesService.html":{}}}],["algorithm",{"_index":417,"title":{},"body":{"injectables/TokenService.html":{}}}],["already",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["app.controller",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":62,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":73,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":69,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":10,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"injectables/PrismaService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(@body",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(body",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.dto",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/auth.controller",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["authbodydto",{"_index":125,"title":{"classes/AuthBodyDto.html":{}},"body":{"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["authcontroller",{"_index":91,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["authdata",{"_index":521,"title":{},"body":{"injectables/UserService.html":{}}}],["authdata.email",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["author",{"_index":662,"title":{},"body":{"properties.html":{}}}],["authorid",{"_index":329,"title":{},"body":{"injectables/NewsService.html":{}}}],["authorize",{"_index":426,"title":{},"body":{"injectables/TokenService.html":{}}}],["authorizeuser",{"_index":510,"title":{},"body":{"injectables/UserService.html":{}}}],["authorizeuser(authdata",{"_index":519,"title":{},"body":{"injectables/UserService.html":{}}}],["await",{"_index":52,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"injectables/PrismaService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":233,"title":{},"body":{"guards/ModeratorActivateGuard.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["badrequestexception('cannot",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('invalid",{"_index":440,"title":{},"body":{"injectables/TokenService.html":{}}}],["badrequestexception('no",{"_index":234,"title":{},"body":{"guards/ModeratorActivateGuard.html":{}}}],["badrequestexception(`user",{"_index":555,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt",{"_index":543,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bearer",{"_index":437,"title":{},"body":{"injectables/TokenService.html":{}}}],["blocked",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["body",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NewsController.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["body.code",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.email",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["body.role",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["body.status",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["bootstrap",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":652,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":649,"title":{},"body":{"modules.html":{}}}],["build",{"_index":644,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["canactivate(context",{"_index":22,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["catch",{"_index":351,"title":{},"body":{"injectables/NewsService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["changeuserrole",{"_index":511,"title":{},"body":{"injectables/UserService.html":{}}}],["changeuserrole(body",{"_index":522,"title":{},"body":{"injectables/UserService.html":{}}}],["changeuserstatus",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["changeuserstatus(body",{"_index":524,"title":{},"body":{"injectables/UserService.html":{}}}],["class",{"_index":38,"title":{"classes/AuthBodyDto.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":126,"title":{},"body":{"classes/AuthBodyDto.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{},"overview.html":{}}}],["cleanoldcodes",{"_index":174,"title":{},"body":{"injectables/CodesService.html":{}}}],["cluster_appmodule",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":136,"title":{},"body":{"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"controllers/UserController.html":{},"index.html":{}}}],["code_validity_seconds",{"_index":195,"title":{},"body":{"injectables/CodesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["codecreationtrials",{"_index":219,"title":{},"body":{"injectables/CodesService.html":{}}}],["codeentity",{"_index":217,"title":{},"body":{"injectables/CodesService.html":{}}}],["codes",{"_index":202,"title":{},"body":{"injectables/CodesService.html":{}}}],["codes.length",{"_index":210,"title":{},"body":{"injectables/CodesService.html":{}}}],["codes/codes.service",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["codesservice",{"_index":83,"title":{"injectables/CodesService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"coverage.html":{},"overview.html":{}}}],["compare",{"_index":542,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(authdata.password",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["compose",{"_index":641,"title":{},"body":{"index.html":{}}}],["console.error",{"_index":353,"title":{},"body":{"injectables/NewsService.html":{}}}],["console.error(e",{"_index":424,"title":{},"body":{"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["console.log({code",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":41,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"injectables/NewsService.html":{},"guards/UserActivateGuard.html":{},"injectables/UserService.html":{}}}],["constructor(prisma",{"_index":178,"title":{},"body":{"injectables/CodesService.html":{},"injectables/NewsService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":40,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(tokenservice",{"_index":13,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["constructor(us",{"_index":109,"title":{},"body":{"injectables/AppService.html":{}}}],["contact",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["context",{"_index":25,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":43,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["controller",{"_index":61,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/NewsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/NewsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('news",{"_index":279,"title":{},"body":{"controllers/NewsController.html":{}}}],["controller('user",{"_index":476,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/NewsController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["cover",{"_index":299,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{}}}],["coverage",{"_index":592,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["createadmin",{"_index":513,"title":{},"body":{"injectables/UserService.html":{}}}],["createadmin(admin",{"_index":526,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":471,"title":{},"body":{"controllers/UserController.html":{}}}],["createduser",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["createduser.password",{"_index":484,"title":{},"body":{"controllers/UserController.html":{}}}],["createduser.salt",{"_index":485,"title":{},"body":{"controllers/UserController.html":{}}}],["createnews",{"_index":323,"title":{},"body":{"injectables/NewsService.html":{}}}],["createnews(data",{"_index":328,"title":{},"body":{"injectables/NewsService.html":{}}}],["createtokens",{"_index":386,"title":{},"body":{"injectables/TokenService.html":{}}}],["createtokens(payload",{"_index":391,"title":{},"body":{"injectables/TokenService.html":{}}}],["createuser",{"_index":514,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(data",{"_index":528,"title":{},"body":{"injectables/UserService.html":{}}}],["cron",{"_index":190,"title":{},"body":{"injectables/CodesService.html":{}}}],["cron('*/5",{"_index":181,"title":{},"body":{"injectables/CodesService.html":{}}}],["cursor",{"_index":362,"title":{},"body":{"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{}}}],["data",{"_index":331,"title":{},"body":{"injectables/NewsService.html":{},"injectables/UserService.html":{}}}],["data.email",{"_index":553,"title":{},"body":{"injectables/UserService.html":{}}}],["data.password",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["data.phone",{"_index":554,"title":{},"body":{"injectables/UserService.html":{}}}],["data.salt",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["declarations",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["default",{"_index":402,"title":{},"body":{"injectables/TokenService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":15,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{}}}],["delete",{"_index":267,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["delete(':newsid",{"_index":295,"title":{},"body":{"controllers/NewsController.html":{}}}],["delete(':newsid')@useguards(moderatoractivateguard",{"_index":251,"title":{},"body":{"controllers/NewsController.html":{}}}],["delete(':userid",{"_index":498,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(':userid')@useguards(adminactivateguard",{"_index":450,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(@param",{"_index":499,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(param",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["deletenews",{"_index":324,"title":{},"body":{"injectables/NewsService.html":{}}}],["deletenews(id",{"_index":332,"title":{},"body":{"injectables/NewsService.html":{}}}],["deletepost",{"_index":240,"title":{},"body":{"controllers/NewsController.html":{}}}],["deletepost(@param",{"_index":296,"title":{},"body":{"controllers/NewsController.html":{}}}],["deletepost(param",{"_index":249,"title":{},"body":{"controllers/NewsController.html":{}}}],["deleteuser",{"_index":515,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(id",{"_index":530,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":75,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["describes",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["description",{"_index":300,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["docker",{"_index":640,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["e",{"_index":352,"title":{},"body":{"injectables/NewsService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["e.code",{"_index":355,"title":{},"body":{"injectables/NewsService.html":{},"injectables/UserService.html":{}}}],["editrole",{"_index":444,"title":{},"body":{"controllers/UserController.html":{}}}],["editrole(@body",{"_index":493,"title":{},"body":{"controllers/UserController.html":{}}}],["editrole(roledata",{"_index":452,"title":{},"body":{"controllers/UserController.html":{}}}],["editstatus",{"_index":445,"title":{},"body":{"controllers/UserController.html":{}}}],["editstatus(@body",{"_index":496,"title":{},"body":{"controllers/UserController.html":{}}}],["editstatus(statusdata",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["email",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enough",{"_index":49,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["enum",{"_index":224,"title":{},"body":{"interfaces/IPayload.html":{},"interfaces/IToken.html":{}}}],["enumerations",{"_index":632,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["executioncontext",{"_index":23,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["existing",{"_index":551,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":557,"title":{},"body":{"injectables/UserService.html":{}}}],["expiresat",{"_index":204,"title":{},"body":{"injectables/CodesService.html":{}}}],["expiresin",{"_index":419,"title":{},"body":{"injectables/TokenService.html":{}}}],["export",{"_index":37,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{}}}],["exports",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":278,"title":{},"body":{"controllers/NewsController.html":{},"injectables/TokenService.html":{},"dependencies.html":{}}}],["extends",{"_index":373,"title":{},"body":{"injectables/PrismaService.html":{}}}],["extracttokenfromheader",{"_index":387,"title":{},"body":{"injectables/TokenService.html":{}}}],["extracttokenfromheader(request",{"_index":393,"title":{},"body":{"injectables/TokenService.html":{}}}],["extractuseridfromtoken",{"_index":388,"title":{},"body":{"injectables/TokenService.html":{}}}],["extractuseridfromtoken(token",{"_index":396,"title":{},"body":{"injectables/TokenService.html":{}}}],["false",{"_index":547,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{}}}],["forbiddenexception",{"_index":189,"title":{},"body":{"injectables/CodesService.html":{},"injectables/UserService.html":{}}}],["forbiddenexception('the",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception('too",{"_index":211,"title":{},"body":{"injectables/CodesService.html":{}}}],["found",{"_index":348,"title":{},"body":{"injectables/NewsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["fs",{"_index":410,"title":{},"body":{"injectables/TokenService.html":{}}}],["function",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":634,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatecode",{"_index":175,"title":{},"body":{"injectables/CodesService.html":{}}}],["gensalt",{"_index":540,"title":{},"body":{"injectables/UserService.html":{}}}],["gensalt(8",{"_index":558,"title":{},"body":{"injectables/UserService.html":{}}}],["get('')@useguards(adminactivateguard",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':newsid",{"_index":288,"title":{},"body":{"controllers/NewsController.html":{}}}],["get(':newsid')@useguards(useractivateguard",{"_index":260,"title":{},"body":{"controllers/NewsController.html":{}}}],["get(':userid",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid')@useguards(adminactivateguard",{"_index":464,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@useguards(useractivateguard",{"_index":256,"title":{},"body":{"controllers/NewsController.html":{}}}],["getallnews",{"_index":241,"title":{},"body":{"controllers/NewsController.html":{}}}],["getallnews(@body",{"_index":286,"title":{},"body":{"controllers/NewsController.html":{}}}],["getallnews(pagination",{"_index":254,"title":{},"body":{"controllers/NewsController.html":{}}}],["getallusers",{"_index":446,"title":{},"body":{"controllers/UserController.html":{}}}],["getallusers(@body",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["getallusers(pagination",{"_index":460,"title":{},"body":{"controllers/UserController.html":{}}}],["getcodeforuser",{"_index":176,"title":{},"body":{"injectables/CodesService.html":{}}}],["getcodeforuser(userid",{"_index":184,"title":{},"body":{"injectables/CodesService.html":{}}}],["gethello",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["getnews",{"_index":325,"title":{},"body":{"injectables/NewsService.html":{}}}],["getnews(pagination",{"_index":334,"title":{},"body":{"injectables/NewsService.html":{}}}],["getnewsbyid",{"_index":242,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["getnewsbyid(@param",{"_index":289,"title":{},"body":{"controllers/NewsController.html":{}}}],["getnewsbyid(id",{"_index":336,"title":{},"body":{"injectables/NewsService.html":{}}}],["getnewsbyid(param",{"_index":259,"title":{},"body":{"controllers/NewsController.html":{}}}],["getting",{"_index":636,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":447,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(param",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbymail",{"_index":516,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbymail(email",{"_index":532,"title":{},"body":{"injectables/UserService.html":{}}}],["given",{"_index":235,"title":{},"body":{"guards/ModeratorActivateGuard.html":{}}}],["gte",{"_index":205,"title":{},"body":{"injectables/CodesService.html":{}}}],["guard",{"_index":0,"title":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}},"body":{"controllers/NewsController.html":{},"coverage.html":{}}}],["guard.ts",{"_index":230,"title":{},"body":{"guards/ModeratorActivateGuard.html":{},"coverage.html":{}}}],["guard.ts:13",{"_index":231,"title":{},"body":{"guards/ModeratorActivateGuard.html":{}}}],["guard.ts:16",{"_index":232,"title":{},"body":{"guards/ModeratorActivateGuard.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{},"overview.html":{}}}],["hash",{"_index":541,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(admin.password",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(data.password",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["http://localhost:3000/auth/auth",{"_index":646,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/auth/refresh",{"_index":648,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/auth/token",{"_index":647,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":268,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["httpcode(202",{"_index":280,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["httpexception",{"_index":340,"title":{},"body":{"injectables/NewsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpexception('news",{"_index":347,"title":{},"body":{"injectables/NewsService.html":{}}}],["httpexception('user",{"_index":357,"title":{},"body":{"injectables/NewsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpstatus",{"_index":341,"title":{},"body":{"injectables/NewsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":349,"title":{},"body":{"injectables/NewsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id",{"_index":223,"title":{},"body":{"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"injectables/NewsService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":39,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"guards/ModeratorActivateGuard.html":{},"injectables/PrismaService.html":{},"guards/UserActivateGuard.html":{}}}],["import",{"_index":28,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{}}}],["imports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{}}}],["injectable",{"_index":29,"title":{"injectables/AppService.html":{},"injectables/CodesService.html":{},"injectables/NewsService.html":{},"injectables/PrismaService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"injectables/NewsService.html":{},"injectables/PrismaService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/CodesService.html":{},"injectables/NewsService.html":{},"injectables/PrismaService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["interface",{"_index":220,"title":{"interfaces/IPayload.html":{},"interfaces/IToken.html":{}},"body":{"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"coverage.html":{}}}],["interfaces",{"_index":221,"title":{},"body":{"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"overview.html":{}}}],["invalid",{"_index":431,"title":{},"body":{"injectables/TokenService.html":{}}}],["ipayload",{"_index":35,"title":{"interfaces/IPayload.html":{}},"body":{"guards/AdminActivateGuard.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["isemail",{"_index":129,"title":{},"body":{"classes/AuthBodyDto.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["isenum",{"_index":308,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["isenum(newsstatus",{"_index":305,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{}}}],["isenum(newsstatus)@isoptional",{"_index":316,"title":{},"body":{"classes/NewsModificationDto.html":{}}}],["isenum(userrole",{"_index":367,"title":{},"body":{"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["isenum(userstatus",{"_index":371,"title":{},"body":{"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["isnumber",{"_index":133,"title":{},"body":{"classes/AuthBodyDto.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{}}}],["isoptional",{"_index":309,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["isphonenumber",{"_index":365,"title":{},"body":{"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["ispositive",{"_index":310,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["ispositive()@isoptional",{"_index":319,"title":{},"body":{"classes/NewsPagination.html":{},"classes/PaginationInput.html":{}}}],["isstring",{"_index":131,"title":{},"body":{"classes/AuthBodyDto.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["isstring()@isoptional",{"_index":313,"title":{},"body":{"classes/NewsModificationDto.html":{}}}],["itoken",{"_index":154,"title":{"interfaces/IToken.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["jsonwebtoken",{"_index":412,"title":{},"body":{"injectables/TokenService.html":{},"dependencies.html":{}}}],["jwt",{"_index":411,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.decode(token",{"_index":438,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.sign",{"_index":414,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.verify(refresh",{"_index":427,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.verify(token",{"_index":432,"title":{},"body":{"injectables/TokenService.html":{}}}],["later",{"_index":216,"title":{},"body":{"injectables/CodesService.html":{}}}],["legend",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["license",{"_index":660,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":250,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["lte",{"_index":207,"title":{},"body":{"injectables/CodesService.html":{}}}],["many",{"_index":212,"title":{},"body":{"injectables/CodesService.html":{}}}],["matching",{"_index":60,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":200,"title":{},"body":{"injectables/CodesService.html":{}}}],["max_code_creation_trial",{"_index":197,"title":{},"body":{"injectables/CodesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_otps_per_user",{"_index":193,"title":{},"body":{"injectables/CodesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_page_size",{"_index":539,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_take",{"_index":342,"title":{},"body":{"injectables/NewsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":425,"title":{},"body":{"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":9,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"injectables/PrismaService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":631,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["moderatoractivateguard",{"_index":227,"title":{"guards/ModeratorActivateGuard.html":{}},"body":{"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"coverage.html":{}}}],["modification",{"_index":266,"title":{},"body":{"controllers/NewsController.html":{}}}],["modified",{"_index":358,"title":{},"body":{"injectables/NewsService.html":{}}}],["modifynews",{"_index":326,"title":{},"body":{"injectables/NewsService.html":{}}}],["modifynews(id",{"_index":338,"title":{},"body":{"injectables/NewsService.html":{}}}],["modifypost",{"_index":243,"title":{},"body":{"controllers/NewsController.html":{}}}],["modifypost(@body",{"_index":293,"title":{},"body":{"controllers/NewsController.html":{}}}],["modifypost(modification",{"_index":262,"title":{},"body":{"controllers/NewsController.html":{}}}],["module",{"_index":72,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":74,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["moment",{"_index":191,"title":{},"body":{"injectables/CodesService.html":{},"dependencies.html":{}}}],["moment().add(code_validity_seconds",{"_index":208,"title":{},"body":{"injectables/CodesService.html":{}}}],["moment().todate",{"_index":206,"title":{},"body":{"injectables/CodesService.html":{}}}],["name",{"_index":19,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["needs",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["neotech",{"_index":639,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":642,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":31,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"injectables/PrismaService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/CodesService.html":{},"dependencies.html":{}}}],["new",{"_index":47,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"injectables/NewsService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["news",{"_index":238,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{},"index.html":{}}}],["news.dto",{"_index":274,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["news.service",{"_index":273,"title":{},"body":{"controllers/NewsController.html":{}}}],["news/news.controller",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["news/news.service",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["newscontroller",{"_index":93,"title":{"controllers/NewsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/NewsController.html":{},"coverage.html":{}}}],["newsid",{"_index":290,"title":{},"body":{"controllers/NewsController.html":{}}}],["newsinputdto",{"_index":245,"title":{"classes/NewsInputDto.html":{}},"body":{"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"coverage.html":{}}}],["newsmodificationdto",{"_index":263,"title":{"classes/NewsModificationDto.html":{}},"body":{"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"coverage.html":{}}}],["newspagination",{"_index":255,"title":{"classes/NewsPagination.html":{}},"body":{"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"coverage.html":{}}}],["newsservice",{"_index":84,"title":{"injectables/NewsService.html":{}},"body":{"modules/AppModule.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"coverage.html":{},"overview.html":{}}}],["newsstatus",{"_index":304,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{}}}],["newuser",{"_index":448,"title":{},"body":{"controllers/UserController.html":{}}}],["newuser(@body",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["newuser(body",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["null",{"_index":218,"title":{},"body":{"injectables/CodesService.html":{}}}],["number",{"_index":137,"title":{},"body":{"classes/AuthBodyDto.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onapplicationbootstrap",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["onmoduleinit",{"_index":375,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":21,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"injectables/UserService.html":{}}}],["out",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":653,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2025",{"_index":356,"title":{},"body":{"injectables/NewsService.html":{},"injectables/UserService.html":{}}}],["package",{"_index":610,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":311,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{}}}],["pagination",{"_index":258,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/UserController.html":{}}}],["pagination.take",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["paginationinput",{"_index":360,"title":{"classes/PaginationInput.html":{}},"body":{"classes/PaginationInput.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{}}}],["param",{"_index":253,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":17,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":269,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["patch(':newsid",{"_index":292,"title":{},"body":{"controllers/NewsController.html":{}}}],["patch(':newsid')@useguards(moderatoractivateguard",{"_index":264,"title":{},"body":{"controllers/NewsController.html":{}}}],["patch('editrole",{"_index":492,"title":{},"body":{"controllers/UserController.html":{}}}],["patch('editrole')@useguards(adminactivateguard",{"_index":453,"title":{},"body":{"controllers/UserController.html":{}}}],["patch('userstatus",{"_index":495,"title":{},"body":{"controllers/UserController.html":{}}}],["patch('userstatus')@useguards(adminactivateguard",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["payload",{"_index":51,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AuthController.html":{},"guards/ModeratorActivateGuard.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{}}}],["payload.email",{"_index":421,"title":{},"body":{"injectables/TokenService.html":{}}}],["payload.id",{"_index":439,"title":{},"body":{"injectables/TokenService.html":{}}}],["payload.name",{"_index":430,"title":{},"body":{"injectables/TokenService.html":{}}}],["payload.role",{"_index":54,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"injectables/TokenService.html":{}}}],["payload.type",{"_index":435,"title":{},"body":{"injectables/TokenService.html":{}}}],["phone",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"miscellaneous/variables.html":{}}}],["popcode",{"_index":177,"title":{},"body":{"injectables/CodesService.html":{}}}],["popcode(email",{"_index":187,"title":{},"body":{"injectables/CodesService.html":{}}}],["post",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('auth",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":643,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":180,"title":{},"body":{"injectables/CodesService.html":{},"injectables/NewsService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma.service",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/client",{"_index":34,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"guards/ModeratorActivateGuard.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":374,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":85,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CodesService.html":{},"injectables/NewsService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NewsController.html":{},"injectables/TokenService.html":{}}}],["privatekey",{"_index":384,"title":{},"body":{"injectables/TokenService.html":{}}}],["probability",{"_index":478,"title":{},"body":{"controllers/UserController.html":{}}}],["process.env.insert_admin",{"_index":123,"title":{},"body":{"injectables/AppService.html":{}}}],["promise",{"_index":27,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":128,"title":{"properties.html":{}},"body":{"classes/AuthBodyDto.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{},"properties.html":{}}}],["providers",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":477,"title":{},"body":{"controllers/UserController.html":{}}}],["publickey",{"_index":385,"title":{},"body":{"injectables/TokenService.html":{}}}],["put",{"_index":270,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["put()@httpcode(202)@useguards(adminactivateguard",{"_index":467,"title":{},"body":{"controllers/UserController.html":{}}}],["put()@httpcode(202)@useguards(moderatoractivateguard",{"_index":246,"title":{},"body":{"controllers/NewsController.html":{}}}],["queries",{"_index":213,"title":{},"body":{"injectables/CodesService.html":{}}}],["readfilesync",{"_index":409,"title":{},"body":{"injectables/TokenService.html":{}}}],["readfilesync('src/keys/key.pem",{"_index":404,"title":{},"body":{"injectables/TokenService.html":{}}}],["readfilesync('src/keys/public.pem",{"_index":407,"title":{},"body":{"injectables/TokenService.html":{}}}],["readonly",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":139,"title":{},"body":{"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["refresh(@body",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(body",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshbodydto",{"_index":138,"title":{"classes/RefreshBodyDto.html":{}},"body":{"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"coverage.html":{}}}],["refreshtoken",{"_index":389,"title":{},"body":{"injectables/TokenService.html":{}}}],["refreshtoken(refresh",{"_index":398,"title":{},"body":{"injectables/TokenService.html":{}}}],["register",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["req",{"_index":271,"title":{},"body":{"controllers/NewsController.html":{}}}],["request",{"_index":42,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{}}}],["request.headers.authorization?.split",{"_index":436,"title":{},"body":{"injectables/TokenService.html":{}}}],["request['user",{"_index":56,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["res",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["results",{"_index":59,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":57,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":26,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"injectables/PrismaService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rights",{"_index":50,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["role",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"classes/PaginationInput.html":{},"injectables/TokenService.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"miscellaneous/variables.html":{}}}],["roledata",{"_index":455,"title":{},"body":{"controllers/UserController.html":{}}}],["rs256",{"_index":418,"title":{},"body":{"injectables/TokenService.html":{}}}],["rxjs",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":368,"title":{},"body":{"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"miscellaneous/variables.html":{}}}],["schedulemodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["seconds').todate",{"_index":209,"title":{},"body":{"injectables/CodesService.html":{}}}],["select",{"_index":549,"title":{},"body":{"injectables/UserService.html":{}}}],["service",{"_index":638,"title":{},"body":{"index.html":{}}}],["skip",{"_index":345,"title":{},"body":{"injectables/NewsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"injectables/PrismaService.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{}}}],["src/.../app.service.ts",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../codes.service.ts",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":635,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../news.service.ts",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token.model.ts",{"_index":633,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.service.ts",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts:14",{"_index":110,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:17",{"_index":111,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:13",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.dto",{"_index":544,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.dto.ts",{"_index":127,"title":{},"body":{"classes/AuthBodyDto.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"coverage.html":{}}}],["src/auth/auth.dto.ts:13",{"_index":381,"title":{},"body":{"classes/TokenBodyDto.html":{}}}],["src/auth/auth.dto.ts:16",{"_index":380,"title":{},"body":{"classes/TokenBodyDto.html":{}}}],["src/auth/auth.dto.ts:19",{"_index":382,"title":{},"body":{"classes/TokenBodyDto.html":{}}}],["src/auth/auth.dto.ts:24",{"_index":378,"title":{},"body":{"classes/RefreshBodyDto.html":{}}}],["src/auth/auth.dto.ts:27",{"_index":379,"title":{},"body":{"classes/RefreshBodyDto.html":{}}}],["src/auth/auth.dto.ts:5",{"_index":130,"title":{},"body":{"classes/AuthBodyDto.html":{}}}],["src/auth/auth.dto.ts:8",{"_index":132,"title":{},"body":{"classes/AuthBodyDto.html":{}}}],["src/codes/codes.service",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/codes/codes.service.ts",{"_index":173,"title":{},"body":{"injectables/CodesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/codes/codes.service.ts:11",{"_index":179,"title":{},"body":{"injectables/CodesService.html":{}}}],["src/codes/codes.service.ts:13",{"_index":183,"title":{},"body":{"injectables/CodesService.html":{}}}],["src/codes/codes.service.ts:21",{"_index":185,"title":{},"body":{"injectables/CodesService.html":{}}}],["src/codes/codes.service.ts:52",{"_index":188,"title":{},"body":{"injectables/CodesService.html":{}}}],["src/codes/codes.service.ts:64",{"_index":182,"title":{},"body":{"injectables/CodesService.html":{}}}],["src/guards/admin",{"_index":6,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/guards/moderator",{"_index":228,"title":{},"body":{"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"coverage.html":{}}}],["src/guards/user",{"_index":276,"title":{},"body":{"controllers/NewsController.html":{},"guards/UserActivateGuard.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":602,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/news/news.controller.ts",{"_index":237,"title":{},"body":{"controllers/NewsController.html":{},"coverage.html":{}}}],["src/news/news.controller.ts:16",{"_index":247,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.controller.ts:24",{"_index":257,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.controller.ts:30",{"_index":261,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.controller.ts:36",{"_index":265,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.controller.ts:42",{"_index":252,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.dto.ts",{"_index":298,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"coverage.html":{}}}],["src/news/news.dto.ts:12",{"_index":303,"title":{},"body":{"classes/NewsInputDto.html":{}}}],["src/news/news.dto.ts:15",{"_index":306,"title":{},"body":{"classes/NewsInputDto.html":{}}}],["src/news/news.dto.ts:21",{"_index":318,"title":{},"body":{"classes/NewsModificationDto.html":{}}}],["src/news/news.dto.ts:25",{"_index":314,"title":{},"body":{"classes/NewsModificationDto.html":{}}}],["src/news/news.dto.ts:29",{"_index":315,"title":{},"body":{"classes/NewsModificationDto.html":{}}}],["src/news/news.dto.ts:33",{"_index":317,"title":{},"body":{"classes/NewsModificationDto.html":{}}}],["src/news/news.dto.ts:39",{"_index":320,"title":{},"body":{"classes/NewsPagination.html":{}}}],["src/news/news.dto.ts:43",{"_index":321,"title":{},"body":{"classes/NewsPagination.html":{}}}],["src/news/news.dto.ts:6",{"_index":307,"title":{},"body":{"classes/NewsInputDto.html":{}}}],["src/news/news.dto.ts:9",{"_index":302,"title":{},"body":{"classes/NewsInputDto.html":{}}}],["src/news/news.service.ts",{"_index":322,"title":{},"body":{"injectables/NewsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/news/news.service.ts:11",{"_index":335,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:20",{"_index":337,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:26",{"_index":330,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:40",{"_index":333,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:49",{"_index":339,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:8",{"_index":327,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/prisma.service",{"_index":192,"title":{},"body":{"injectables/CodesService.html":{},"injectables/NewsService.html":{},"injectables/UserService.html":{}}}],["src/prisma.service.ts",{"_index":372,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:6",{"_index":376,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/token/token.model",{"_index":36,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AuthController.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{},"injectables/UserService.html":{}}}],["src/token/token.model.ts",{"_index":222,"title":{},"body":{"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/token/token.service",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NewsController.html":{}}}],["src/token/token.service.ts",{"_index":383,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{}}}],["src/token/token.service.ts:10",{"_index":408,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:12",{"_index":392,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:23",{"_index":399,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:45",{"_index":401,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:59",{"_index":394,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:64",{"_index":397,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:9",{"_index":406,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/user/user.controller.ts",{"_index":443,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:19",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:28",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:36",{"_index":462,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:42",{"_index":454,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:48",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:54",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.dto.ts",{"_index":361,"title":{},"body":{"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{}}}],["src/user/user.dto.ts:12",{"_index":502,"title":{},"body":{"classes/UserInput.html":{}}}],["src/user/user.dto.ts:15",{"_index":504,"title":{},"body":{"classes/UserInput.html":{}}}],["src/user/user.dto.ts:17",{"_index":506,"title":{},"body":{"classes/UserInput.html":{}}}],["src/user/user.dto.ts:18",{"_index":505,"title":{},"body":{"classes/UserInput.html":{}}}],["src/user/user.dto.ts:23",{"_index":507,"title":{},"body":{"classes/UserRoleEdit.html":{}}}],["src/user/user.dto.ts:26",{"_index":508,"title":{},"body":{"classes/UserRoleEdit.html":{}}}],["src/user/user.dto.ts:31",{"_index":590,"title":{},"body":{"classes/UserStatusEdit.html":{}}}],["src/user/user.dto.ts:34",{"_index":591,"title":{},"body":{"classes/UserStatusEdit.html":{}}}],["src/user/user.dto.ts:40",{"_index":363,"title":{},"body":{"classes/PaginationInput.html":{}}}],["src/user/user.dto.ts:44",{"_index":364,"title":{},"body":{"classes/PaginationInput.html":{}}}],["src/user/user.dto.ts:6",{"_index":501,"title":{},"body":{"classes/UserInput.html":{}}}],["src/user/user.dto.ts:9",{"_index":503,"title":{},"body":{"classes/UserInput.html":{}}}],["src/user/user.service",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/user/user.service.ts",{"_index":509,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.service.ts:103",{"_index":523,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:120",{"_index":525,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:137",{"_index":531,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:149",{"_index":527,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":518,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":535,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:35",{"_index":537,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:43",{"_index":529,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:66",{"_index":520,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:87",{"_index":533,"title":{},"body":{"injectables/UserService.html":{}}}],["standard",{"_index":226,"title":{},"body":{"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"miscellaneous/enumerations.html":{}}}],["started",{"_index":637,"title":{"index.html":{}},"body":{}}],["statements",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"miscellaneous/variables.html":{}}}],["statusdata",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["string",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthBodyDto.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{}}}],["support",{"_index":650,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":651,"title":{},"body":{"modules.html":{}}}],["table",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":312,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{}}}],["this.$connect",{"_index":377,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.codesservice.getcodeforuser(user.id",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.codesservice.popcode(body.email",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.generatecode",{"_index":201,"title":{},"body":{"injectables/CodesService.html":{}}}],["this.newsservice.createnews(news",{"_index":284,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.newsservice.deletenews(parseint(param.newsid",{"_index":297,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.newsservice.getnews(pagination",{"_index":287,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.newsservice.getnewsbyid(parseint(param.newsid",{"_index":291,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.newsservice.modifynews(parseint(param.newsid",{"_index":294,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.prisma.news.create",{"_index":350,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.prisma.news.delete",{"_index":354,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.prisma.news.findmany",{"_index":344,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.prisma.news.findunique",{"_index":346,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.prisma.news.update",{"_index":359,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.prisma.otp.findmany",{"_index":203,"title":{},"body":{"injectables/CodesService.html":{}}}],["this.prisma.user.create",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findfirst",{"_index":552,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":550,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":548,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":580,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.upsert",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["this.privatekey",{"_index":416,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.publickey",{"_index":433,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.tokenservice.createtokens(payload",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.tokenservice.extracttokenfromheader(request",{"_index":45,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"guards/UserActivateGuard.html":{}}}],["this.tokenservice.extractuseridfromtoken(token",{"_index":283,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.tokenservice.refreshtoken(body.refresh",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.tokenservice.verifytoken(token",{"_index":53,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["this.us.createadmin(admin_data",{"_index":124,"title":{},"body":{"injectables/AppService.html":{}}}],["this.userservice.authorizeuser(body",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.changeuserrole(roledata",{"_index":494,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.changeuserstatus(statusdata",{"_index":497,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser(body",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(parseint(param.userid",{"_index":500,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user(parseint(param.userid",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.users(pagination.cursor",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":46,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"injectables/NewsService.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["title",{"_index":301,"title":{},"body":{"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{}}}],["token",{"_index":44,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AuthController.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"index.html":{}}}],["token(@body",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["token(body",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.model",{"_index":413,"title":{},"body":{"injectables/TokenService.html":{}}}],["token/token.service",{"_index":32,"title":{},"body":{"guards/AdminActivateGuard.html":{},"modules/AppModule.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["tokenbodydto",{"_index":135,"title":{"classes/TokenBodyDto.html":{}},"body":{"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"coverage.html":{}}}],["tokenservice",{"_index":14,"title":{"injectables/TokenService.html":{}},"body":{"guards/AdminActivateGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"coverage.html":{},"overview.html":{}}}],["tokentype",{"_index":225,"title":{},"body":{"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"injectables/TokenService.html":{},"miscellaneous/enumerations.html":{}}}],["tokentype.refresh",{"_index":422,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokentype.standard",{"_index":415,"title":{},"body":{"injectables/TokenService.html":{}}}],["transformer",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":58,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":214,"title":{},"body":{"injectables/CodesService.html":{},"injectables/NewsService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["type",{"_index":20,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"classes/AuthBodyDto.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"interfaces/IPayload.html":{},"interfaces/IToken.html":{},"guards/ModeratorActivateGuard.html":{},"controllers/NewsController.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"injectables/NewsService.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["types/moment",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["unable",{"_index":428,"title":{},"body":{"injectables/TokenService.html":{}}}],["unauthorizedexception",{"_index":30,"title":{},"body":{"guards/AdminActivateGuard.html":{},"controllers/AuthController.html":{},"injectables/CodesService.html":{},"guards/ModeratorActivateGuard.html":{},"injectables/TokenService.html":{},"guards/UserActivateGuard.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception('cannot",{"_index":434,"title":{},"body":{"injectables/TokenService.html":{}}}],["unauthorizedexception('user",{"_index":48,"title":{},"body":{"guards/AdminActivateGuard.html":{},"guards/ModeratorActivateGuard.html":{},"guards/UserActivateGuard.html":{}}}],["undefined",{"_index":395,"title":{},"body":{"injectables/TokenService.html":{}}}],["unknown",{"_index":248,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":661,"title":{},"body":{"properties.html":{}}}],["up",{"_index":645,"title":{},"body":{"index.html":{}}}],["update",{"_index":589,"title":{},"body":{"injectables/UserService.html":{}}}],["useguards",{"_index":272,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["useguards(adminactivateguard",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(moderatoractivateguard",{"_index":281,"title":{},"body":{"controllers/NewsController.html":{}}}],["useguards(useractivateguard",{"_index":285,"title":{},"body":{"controllers/NewsController.html":{}}}],["user",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user(id",{"_index":534,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":475,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":474,"title":{},"body":{"controllers/UserController.html":{}}}],["user/user.controller",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["user_fields_display",{"_index":546,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useractivateguard",{"_index":275,"title":{"guards/UserActivateGuard.html":{}},"body":{"controllers/NewsController.html":{},"guards/UserActivateGuard.html":{},"coverage.html":{}}}],["usercontroller",{"_index":92,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["userdata",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["userdata.email",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["userdata.id",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["userdata.password",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["userdata.role",{"_index":579,"title":{},"body":{"injectables/UserService.html":{}}}],["userdata.status",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":186,"title":{},"body":{"injectables/CodesService.html":{},"controllers/NewsController.html":{},"controllers/UserController.html":{}}}],["userinput",{"_index":366,"title":{"classes/UserInput.html":{}},"body":{"classes/PaginationInput.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{}}}],["userrole",{"_index":33,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"guards/ModeratorActivateGuard.html":{},"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{}}}],["userrole.admin",{"_index":55,"title":{},"body":{"guards/AdminActivateGuard.html":{},"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["userrole.user",{"_index":236,"title":{},"body":{"guards/ModeratorActivateGuard.html":{}}}],["userroleedit",{"_index":369,"title":{"classes/UserRoleEdit.html":{}},"body":{"classes/PaginationInput.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{}}}],["users",{"_index":517,"title":{},"body":{"injectables/UserService.html":{}}}],["users(cursor",{"_index":536,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":86,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userstatus",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"classes/PaginationInput.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{}}}],["userstatus.active",{"_index":122,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["userstatus.blocked",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["userstatusedit",{"_index":370,"title":{"classes/UserStatusEdit.html":{}},"body":{"classes/PaginationInput.html":{},"controllers/UserController.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"injectables/UserService.html":{},"classes/UserStatusEdit.html":{},"coverage.html":{}}}],["utf8",{"_index":405,"title":{},"body":{"injectables/TokenService.html":{}}}],["validator",{"_index":134,"title":{},"body":{"classes/AuthBodyDto.html":{},"classes/NewsInputDto.html":{},"classes/NewsModificationDto.html":{},"classes/NewsPagination.html":{},"classes/PaginationInput.html":{},"classes/RefreshBodyDto.html":{},"classes/TokenBodyDto.html":{},"classes/UserInput.html":{},"classes/UserRoleEdit.html":{},"classes/UserStatusEdit.html":{},"dependencies.html":{}}}],["value",{"_index":403,"title":{},"body":{"injectables/TokenService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":663,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":429,"title":{},"body":{"injectables/TokenService.html":{}}}],["verifytoken",{"_index":390,"title":{},"body":{"injectables/TokenService.html":{}}}],["verifytoken(token",{"_index":400,"title":{},"body":{"injectables/TokenService.html":{}}}],["version",{"_index":658,"title":{},"body":{"properties.html":{}}}],["wrong",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["zoom",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AdminActivateGuard.html":{"url":"guards/AdminActivateGuard.html","title":"guard - AdminActivateGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AdminActivateGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/admin-activate.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(tokenService: TokenService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/admin-activate.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/admin-activate.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\nimport { TokenService } from '../token/token.service';\nimport { UserRole } from '@prisma/client';\nimport { IPayload } from 'src/token/token.model';\n\n@Injectable()\nexport class AdminActivateGuard implements CanActivate {\n    constructor(private tokenService: TokenService) { }\n\n    async canActivate(context: ExecutionContext): Promise {\n        const request = context.switchToHttp().getRequest();\n        const token = this.tokenService.extractTokenFromHeader(request);\n        if (!token) {\n            throw new UnauthorizedException('User does not have enough rights');\n        }\n        const payload = await this.tokenService.verifyToken(token) as IPayload;\n        if (payload.role !== UserRole.admin) throw new UnauthorizedException('User Does not have enough rights');\n        request['user'] = payload;\n        return true;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return '/';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCodesService\n\nCodesService\n\nAppModule -->\n\nCodesService->AppModule\n\n\n\n\n\nNewsService\n\nNewsService\n\nAppModule -->\n\nNewsService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAppModule -->\n\nTokenService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            CodesService\n                        \n                        \n                            NewsService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TokenService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            AuthController\n                        \n                        \n                            UserController\n                        \n                        \n                            NewsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthController } from './auth/auth.controller';\nimport { UserController } from './user/user.controller';\nimport { NewsController } from './news/news.controller';\nimport { TokenService } from './token/token.service';\nimport { PrismaService } from './prisma.service';\nimport { UserService } from './user/user.service';\nimport { CodesService } from './codes/codes.service';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { NewsService } from './news/news.service';\n\n@Module({\n  imports: [\n    ScheduleModule.forRoot()\n  ],\n  controllers: [AppController, AuthController, UserController, NewsController],\n  providers: [AppService, TokenService, PrismaService, UserService, CodesService, NewsService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(us: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        us\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { UserRole, UserStatus } from '@prisma/client';\nimport { UserService } from './user/user.service';\n\nconst ADMIN_DATA = {\n  email: 'admin@admin.admin',\n  phone: '+99812312312',\n  password: 'admin',\n  role: UserRole.admin,\n  status: UserStatus.active,\n}\n\n@Injectable()\nexport class AppService implements OnApplicationBootstrap {\n  constructor(private us: UserService) { }\n\n  async onApplicationBootstrap() {\n    if (!process.env.INSERT_ADMIN) return;\n    await this.us.createAdmin(ADMIN_DATA);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthBodyDto.html":{"url":"classes/AuthBodyDto.html","title":"class - AuthBodyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthBodyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNumber, IsString } from \"class-validator\";\n\nexport class AuthBodyDto {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n}\n\nexport class TokenBodyDto {\n    @IsEmail()\n    email: string;\n    \n    @IsNumber()\n    code: number;\n\n    @IsString()\n    password: string;\n}\n\nexport class RefreshBodyDto {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    refresh: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                auth\n                            \n                            \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    Async\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        auth\n                        \n                    \n                \n            \n            \n                \n                        \n                    auth(body: AuthBodyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('auth')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthBodyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(body: RefreshBodyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            RefreshBodyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: TokenBodyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            TokenBodyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UnauthorizedException } from '@nestjs/common';\nimport { IToken } from 'src/token/token.model'\nimport { UserService } from 'src/user/user.service';\nimport { TokenService } from 'src/token/token.service';\nimport { AuthBodyDto, RefreshBodyDto, TokenBodyDto } from './auth.dto';\nimport { CodesService } from 'src/codes/codes.service';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private userService: UserService, private tokenService: TokenService, private codesService: CodesService) {}\n\n    @Post('auth')\n    async auth(@Body() body: AuthBodyDto) {\n        const user = await this.userService.authorizeUser(body);\n        const code = await this.codesService.getCodeForUser(user.id);\n        console.log({code, user: body.email});\n    }\n\n    @Post('token')\n    async token(@Body() body: TokenBodyDto): Promise {\n        const payload = await this.userService.authorizeUser(body);\n        await this.codesService.popCode(body.email, body.code);\n        return this.tokenService.createTokens(payload)\n    }\n\n    @Post('refresh')\n    async refresh(@Body() body: RefreshBodyDto): Promise {\n        return this.tokenService.refreshToken(body.refresh, body.email)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodesService.html":{"url":"injectables/CodesService.html","title":"injectable - CodesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/codes/codes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                cleanOldCodes\n                            \n                            \n                                generateCode\n                            \n                            \n                                    Async\n                                getCodeForUser\n                            \n                            \n                                    Async\n                                popCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/codes/codes.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        cleanOldCodes\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanOldCodes()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('*/5 * * * *')\n                \n            \n\n                    \n                        \n                            Defined in src/codes/codes.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateCode\n                        \n                    \n                \n            \n            \n                \ngenerateCode()\n                \n            \n\n\n                    \n                        \n                            Defined in src/codes/codes.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCodeForUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCodeForUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/codes/codes.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        popCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    popCode(email: string, code: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/codes/codes.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport moment from 'moment';\nimport { PrismaService } from 'src/prisma.service';\n\nconst MAX_OTPS_PER_USER = 5;\nconst CODE_VALIDITY_SECONDS = 120;\nconst MAX_CODE_CREATION_TRIAL = 5; \n\n@Injectable()\nexport class CodesService {\n    constructor(private prisma: PrismaService) { }\n    generateCode(): number {\n        let code = 0;\n        while (code  1000000) {\n            code = Math.floor(Math.random() * 1000000);\n        }\n        return code;\n    }\n\n    async getCodeForUser(userId: number): Promise {\n        const code = this.generateCode();\n        const codes = await this.prisma.otp.findMany({ where: { userId, expiresAt: {\n            gte: moment().toDate(), \n            lte: moment().add(CODE_VALIDITY_SECONDS, 'seconds').toDate() \n        } } });\n        if (codes.length > MAX_OTPS_PER_USER) {\n            throw new ForbiddenException('Too many codes queries, try again later');\n        }\n\n        let codeEntity = null;\n        let codeCreationTrials = 0;\n\n        while (!codeEntity && codeCreationTrials \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPayload.html":{"url":"interfaces/IPayload.html","title":"interface - IPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/token/token.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IToken {\n    token: string;\n    refresh?: string;\n}\n\nexport interface IPayload {\n    id: number;\n    email: string;\n    role: string;\n}\n\nexport enum TokenType {\n    standard,\n    refresh\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IToken.html":{"url":"interfaces/IToken.html","title":"interface - IToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/token/token.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            refresh\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        refresh\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refresh:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IToken {\n    token: string;\n    refresh?: string;\n}\n\nexport interface IPayload {\n    id: number;\n    email: string;\n    role: string;\n}\n\nexport enum TokenType {\n    standard,\n    refresh\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ModeratorActivateGuard.html":{"url":"guards/ModeratorActivateGuard.html","title":"guard - ModeratorActivateGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ModeratorActivateGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/moderator-activate-guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(tokenService: TokenService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/moderator-activate-guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/moderator-activate-guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    BadRequestException,\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\nimport { TokenService } from '../token/token.service';\nimport { UserRole } from '@prisma/client';\nimport { IPayload } from 'src/token/token.model';\n\n@Injectable()\nexport class ModeratorActivateGuard implements CanActivate {\n    constructor(private tokenService: TokenService) { }\n\n    async canActivate(context: ExecutionContext): Promise {\n        const request = context.switchToHttp().getRequest();\n        const token = this.tokenService.extractTokenFromHeader(request);\n        if (!token) {\n            throw new BadRequestException('No Token Given');\n        }\n        const payload = await this.tokenService.verifyToken(token) as IPayload;\n        if (payload.role === UserRole.user) throw new UnauthorizedException('User Does not have enough rights');\n        request['user'] = payload;\n        return true;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NewsController.html":{"url":"controllers/NewsController.html","title":"controller - NewsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NewsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/news/news.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                news\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                addNews\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllNews\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getNewsById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                modifyPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        addNews\n                        \n                    \n                \n            \n            \n                \n                        \n                    addNews(news: NewsInputDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(202)@UseGuards(ModeratorActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/news/news.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                news\n                                            \n                                                            NewsInputDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(param: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':newsId')@UseGuards(ModeratorActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/news/news.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllNews\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllNews(pagination: NewsPagination)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(UserActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/news/news.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pagination\n                                            \n                                                            NewsPagination\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getNewsById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewsById(param: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':newsId')@UseGuards(UserActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/news/news.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        modifyPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    modifyPost(modification: NewsModificationDto, param: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':newsId')@UseGuards(ModeratorActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/news/news.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                modification\n                                            \n                                                            NewsModificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                param\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, Param, Patch, Put, Req, UseGuards } from '@nestjs/common';\nimport { NewsService } from './news.service';\nimport { ModeratorActivateGuard } from 'src/guards/moderator-activate-guard';\nimport { NewsInputDto, NewsModificationDto, NewsPagination } from './news.dto';\nimport { UserActivateGuard } from 'src/guards/user-activate.guard';\nimport { Request } from 'express';\nimport { TokenService } from 'src/token/token.service';\n\n@Controller('news')\nexport class NewsController {\n    constructor(private newsService: NewsService, private tokenService: TokenService) {}\n\n    @Put()\n    @HttpCode(202)\n    @UseGuards(ModeratorActivateGuard)\n    async addNews(@Body() news: NewsInputDto, @Req() request: Request) {\n        const token = this.tokenService.extractTokenFromHeader(request);\n        const userId = this.tokenService.extractUserIdFromToken(token);\n        return await this.newsService.createNews(news, userId);\n    }\n\n    @Get()\n    @UseGuards(UserActivateGuard)\n    async getAllNews(@Body() pagination: NewsPagination) {\n        return this.newsService.getNews(pagination);\n    }\n    \n    @Get(':newsId')\n    @UseGuards(UserActivateGuard)\n    async getNewsById(@Param() param: { newsId: string}) {\n        return this.newsService.getNewsById(parseInt(param.newsId));\n    }\n\n    @Patch(':newsId')\n    @UseGuards(ModeratorActivateGuard)\n    async modifyPost(@Body() modification: NewsModificationDto, @Param() param: { newsId: string}) {\n        return this.newsService.modifyNews(parseInt(param.newsId), modification);\n    }\n\n    @Delete(':newsId')\n    @UseGuards(ModeratorActivateGuard)\n    async deletePost(@Param() param: { newsId: string}) {\n        return this.newsService.deleteNews(parseInt(param.newsId));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewsInputDto.html":{"url":"classes/NewsInputDto.html","title":"class - NewsInputDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewsInputDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/news/news.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                cover\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NewsStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(NewsStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NewsStatus } from \"@prisma/client\";\nimport { IsEnum, IsOptional, IsPositive, IsString } from \"class-validator\";\n\nexport class NewsInputDto {\n    @IsString()\n    title: string;\n\n    @IsString()\n    cover: string;\n\n    @IsString()\n    description: string;\n\n    @IsEnum(NewsStatus)\n    status: NewsStatus;\n}\n\nexport class NewsModificationDto {\n    @IsString()\n    @IsOptional()\n    title: string;\n\n    @IsString()\n    @IsOptional()\n    cover: string;\n\n    @IsString()\n    @IsOptional()\n    description: string;\n\n    @IsEnum(NewsStatus)\n    @IsOptional()\n    status: NewsStatus;\n}\n\nexport class NewsPagination {\n    @IsPositive()\n    @IsOptional()\n    page: number;\n\n    @IsPositive()\n    @IsOptional()\n    take: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewsModificationDto.html":{"url":"classes/NewsModificationDto.html","title":"class - NewsModificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewsModificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/news/news.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                cover\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NewsStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(NewsStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NewsStatus } from \"@prisma/client\";\nimport { IsEnum, IsOptional, IsPositive, IsString } from \"class-validator\";\n\nexport class NewsInputDto {\n    @IsString()\n    title: string;\n\n    @IsString()\n    cover: string;\n\n    @IsString()\n    description: string;\n\n    @IsEnum(NewsStatus)\n    status: NewsStatus;\n}\n\nexport class NewsModificationDto {\n    @IsString()\n    @IsOptional()\n    title: string;\n\n    @IsString()\n    @IsOptional()\n    cover: string;\n\n    @IsString()\n    @IsOptional()\n    description: string;\n\n    @IsEnum(NewsStatus)\n    @IsOptional()\n    status: NewsStatus;\n}\n\nexport class NewsPagination {\n    @IsPositive()\n    @IsOptional()\n    page: number;\n\n    @IsPositive()\n    @IsOptional()\n    take: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewsPagination.html":{"url":"classes/NewsPagination.html","title":"class - NewsPagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewsPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/news/news.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/news/news.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NewsStatus } from \"@prisma/client\";\nimport { IsEnum, IsOptional, IsPositive, IsString } from \"class-validator\";\n\nexport class NewsInputDto {\n    @IsString()\n    title: string;\n\n    @IsString()\n    cover: string;\n\n    @IsString()\n    description: string;\n\n    @IsEnum(NewsStatus)\n    status: NewsStatus;\n}\n\nexport class NewsModificationDto {\n    @IsString()\n    @IsOptional()\n    title: string;\n\n    @IsString()\n    @IsOptional()\n    cover: string;\n\n    @IsString()\n    @IsOptional()\n    description: string;\n\n    @IsEnum(NewsStatus)\n    @IsOptional()\n    status: NewsStatus;\n}\n\nexport class NewsPagination {\n    @IsPositive()\n    @IsOptional()\n    page: number;\n\n    @IsPositive()\n    @IsOptional()\n    take: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NewsService.html":{"url":"injectables/NewsService.html","title":"injectable - NewsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NewsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/news/news.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNews\n                            \n                            \n                                    Async\n                                deleteNews\n                            \n                            \n                                    Async\n                                getNews\n                            \n                            \n                                    Async\n                                getNewsById\n                            \n                            \n                                    Async\n                                modifyNews\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/news/news.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createNews\n                        \n                    \n                \n            \n            \n                \n                        \n                    createNews(data: NewsInputDto, authorId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/news/news.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            NewsInputDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authorId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteNews\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteNews(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/news/news.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNews\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNews(pagination: NewsPagination)\n                \n            \n\n\n                    \n                        \n                            Defined in src/news/news.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pagination\n                                            \n                                                            NewsPagination\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNewsById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewsById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/news/news.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        modifyNews\n                        \n                    \n                \n            \n            \n                \n                        \n                    modifyNews(id: number, data: NewsModificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/news/news.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            NewsModificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"src/prisma.service\";\nimport { NewsInputDto, NewsModificationDto, NewsPagination } from \"./news.dto\";\n\nconst MAX_TAKE = 100;\n\n@Injectable()\nexport class NewsService {\n    constructor(private prisma: PrismaService) { }\n\n    async getNews(pagination: NewsPagination) {\n        let { page = 0, take = MAX_TAKE } = pagination;\n        if (take > MAX_TAKE) take = MAX_TAKE\n        return await this.prisma.news.findMany({\n            skip: page * MAX_TAKE,\n            take\n        });\n    }\n\n    async getNewsById(id: number) {\n        const news = await this.prisma.news.findUnique({ where: { id } });\n        if (!news) throw new HttpException('News not found', HttpStatus.NOT_FOUND);\n        return news;\n    }\n\n    async createNews(data: NewsInputDto, authorId: number) {\n        try {\n            return await this.prisma.news.create({\n                data: {\n                    ...data,\n                    authorId\n                }\n            })\n        } catch (e) {\n            console.error({ e });\n            throw e;\n        }\n    }\n\n    async deleteNews(id: number) {\n        try {\n            return await this.prisma.news.delete({ where: { id } });\n        } catch (e) {\n            if (e.code === 'P2025') throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n            throw e;\n        }\n    }\n\n    async modifyNews(id: number, data: NewsModificationDto) {\n        try {\n            const modified = await this.prisma.news.update({ where: { id }, data })\n        } catch (e) {\n            if (e.code === 'P2025') throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n            throw e;\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationInput.html":{"url":"classes/PaginationInput.html","title":"class - PaginationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                cursor\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        cursor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole, UserStatus } from \"@prisma/client\";\nimport { IsEmail, IsEnum, IsOptional, IsPhoneNumber, IsPositive, IsString } from \"class-validator\";\n\nexport class UserInput {\n    @IsEmail()\n    email: string;\n\n    @IsPhoneNumber()\n    phone: string\n\n    @IsString()\n    password: string\n\n    @IsEnum(UserRole)\n    role: UserRole;\n\n    status?: UserStatus;\n    salt?: string;    \n}\n\nexport class UserRoleEdit {\n    @IsEmail()\n    email: string;\n\n    @IsEnum(UserRole)\n    role: UserRole;\n}\n\nexport class UserStatusEdit {\n    @IsEmail()\n    email: string;\n\n    @IsEnum(UserStatus)\n    status: UserStatus;\n}\n\nexport class PaginationInput {\n    @IsPositive()\n    @IsOptional()\n    cursor?: number;\n\n    @IsPositive()\n    @IsOptional()\n    take?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshBodyDto.html":{"url":"classes/RefreshBodyDto.html","title":"class - RefreshBodyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshBodyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                refresh\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refresh\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNumber, IsString } from \"class-validator\";\n\nexport class AuthBodyDto {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n}\n\nexport class TokenBodyDto {\n    @IsEmail()\n    email: string;\n    \n    @IsNumber()\n    code: number;\n\n    @IsString()\n    password: string;\n}\n\nexport class RefreshBodyDto {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    refresh: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenBodyDto.html":{"url":"classes/TokenBodyDto.html","title":"class - TokenBodyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenBodyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNumber, IsString } from \"class-validator\";\n\nexport class AuthBodyDto {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n}\n\nexport class TokenBodyDto {\n    @IsEmail()\n    email: string;\n    \n    @IsNumber()\n    code: number;\n\n    @IsString()\n    password: string;\n}\n\nexport class RefreshBodyDto {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    refresh: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/token/token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                privateKey\n                            \n                            \n                                    Private\n                                publicKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTokens\n                            \n                            \n                                extractTokenFromHeader\n                            \n                            \n                                extractUserIdFromToken\n                            \n                            \n                                refreshToken\n                            \n                            \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTokens\n                        \n                    \n                \n            \n            \n                \ncreateTokens(payload: IPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/token/token.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IToken\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \nextractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/token/token.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractUserIdFromToken\n                        \n                    \n                \n            \n            \n                \nextractUserIdFromToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/token/token.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \nrefreshToken(refresh: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/token/token.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refresh\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IToken\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyToken\n                        \n                    \n                \n            \n            \n                \nverifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/token/token.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Default value : readFileSync('src/keys/key.pem', 'utf8')\n                    \n                \n                    \n                        \n                                Defined in src/token/token.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Default value : readFileSync('src/keys/public.pem', 'utf8')\n                    \n                \n                    \n                        \n                                Defined in src/token/token.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { readFileSync } from 'fs';\nimport * as jwt from 'jsonwebtoken';\nimport { Request } from 'express';\nimport { IPayload, IToken, TokenType } from './token.model';\n\n@Injectable()\nexport class TokenService {\n    private privateKey = readFileSync('src/keys/key.pem', 'utf8');\n    private publicKey = readFileSync('src/keys/public.pem', 'utf8');\n\n    createTokens(payload: IPayload): IToken {\n        try {\n            const token = jwt.sign({ ...payload, type: TokenType.standard }, this.privateKey, { algorithm: 'RS256', expiresIn: '1h' });\n            const refresh = jwt.sign({ email: payload.email, type: TokenType.refresh }, this.privateKey, { algorithm: 'RS256', expiresIn: '1d' });\n            return { token, refresh };\n        } catch (e) {\n            console.error(e);\n            throw new UnauthorizedException({ message: 'Could not authorize the user' })\n        }\n    }\n\n    refreshToken(refresh: string, email: string): IToken {\n        let payload;\n        try {\n        payload = jwt.verify(refresh, this.privateKey) as IPayload;\n        } catch (e) {\n            console.error(e);\n            throw new UnauthorizedException({ message: 'Unable to verify refresh token'})\n        }\n        if (payload.email !== email) {\n            throw new UnauthorizedException({ message: 'Email in payload and body not matching' });\n        }\n        try {\n            const token = jwt.sign({ email: payload.email, name: payload.name, role: payload.role }, this.privateKey, { algorithm: 'RS256', expiresIn: '1h' });\n            return {\n                token\n            }\n        } catch (e) {\n            console.error(e);\n            throw new UnauthorizedException({ message: 'Invalid refresh token' })\n        }\n    }\n\n    verifyToken(token: string) {\n        let payload;\n        try {\n            payload = jwt.verify(token, this.publicKey) as IPayload;\n        } catch (e) {\n            console.error(e);\n            throw new UnauthorizedException('cannot authorize jwt');\n        }\n        if (payload.type === TokenType.refresh) {\n            throw new UnauthorizedException('cannot authorize with refresh token');\n        }\n        return payload;\n    }\n\n    extractTokenFromHeader(request: Request): string | undefined {\n        const [type, token] = request.headers.authorization?.split(' ') ?? [];\n        return type === 'Bearer' ? token : undefined;\n    }\n\n    extractUserIdFromToken(token: string): number {\n        try {\n            const payload: IPayload = jwt.decode(token);\n            return payload.id\n        } catch (e) {\n            console.error(e)\n            throw new BadRequestException('Invalid token');\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/UserActivateGuard.html":{"url":"guards/UserActivateGuard.html","title":"guard - UserActivateGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    UserActivateGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/user-activate.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(tokenService: TokenService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/user-activate.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/user-activate.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { TokenService } from '../token/token.service';\nimport { IPayload } from 'src/token/token.model';\n\n@Injectable()\nexport class UserActivateGuard implements CanActivate {\n    constructor(private tokenService: TokenService) { }\n\n    async canActivate(context: ExecutionContext): Promise {\n        const request = context.switchToHttp().getRequest();\n        const token = this.tokenService.extractTokenFromHeader(request);\n        if (!token) {\n            throw new UnauthorizedException('User does not have enough rights');\n        }\n        const payload = await this.tokenService.verifyToken(token) as IPayload;\n        request['user'] = payload;\n        return true;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editRole\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editStatus\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                newUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(param: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':userId')@UseGuards(AdminActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    editRole(roleData: UserRoleEdit)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('editRole')@UseGuards(AdminActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleData\n                                            \n                                                            UserRoleEdit\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    editStatus(statusData: UserStatusEdit)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('userStatus')@UseGuards(AdminActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                statusData\n                                            \n                                                            UserStatusEdit\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(pagination: PaginationInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')@UseGuards(AdminActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pagination\n                                            \n                                                            PaginationInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(param: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId')@UseGuards(AdminActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        newUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    newUser(body: UserInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(202)@UseGuards(AdminActivateGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            UserInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    describes what user needs to be created\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                user created adn 202 code\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpException, HttpStatus, Param, Patch, Put, UseGuards } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PaginationInput, UserInput, UserRoleEdit, UserStatusEdit } from './user.dto';\nimport { AdminActivateGuard } from 'src/guards/admin-activate.guard';\n\n@Controller('user')\nexport class UserController {\n    constructor(private userService: UserService) {}\n\n    /**\n     * \n     * @param body describes what user needs to be created\n     * @returns user created adn 202 code\n     * @description provides probability for the user to register\n     */\n    @Put()\n    @HttpCode(202)\n    @UseGuards(AdminActivateGuard)\n    async newUser(@Body() body: UserInput){\n        const createdUser = await this.userService.createUser(body);\n        delete createdUser.password;\n        delete createdUser.salt;\n        return createdUser;\n    }\n\n    @Get(':userId')\n    @UseGuards(AdminActivateGuard)\n    async getUser(@Param() param: { userId: string}){ \n        const user = await this.userService.user(parseInt(param.userId));\n        if (!user) throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n        return user;\n    }\n    \n    @Get('')\n    @UseGuards(AdminActivateGuard)\n    async getAllUsers(@Body() pagination: PaginationInput){\n       return await this.userService.users(pagination.cursor, pagination.take); \n    }\n\n    @Patch('editRole')\n    @UseGuards(AdminActivateGuard)\n    async editRole(@Body() roleData: UserRoleEdit){\n        return await this.userService.changeUserRole(roleData);\n    }\n\n    @Patch('userStatus')\n    @UseGuards(AdminActivateGuard)\n    async editStatus(@Body() statusData: UserStatusEdit) {\n        return await this.userService.changeUserStatus(statusData);\n    }\n\n    @Delete(':userId')\n    @UseGuards(AdminActivateGuard)\n    async delete(@Param() param: { userId: string}){\n        return await this.userService.deleteUser(parseInt(param.userId));\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInput.html":{"url":"classes/UserInput.html","title":"class - UserInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    Optional\n                                salt\n                            \n                            \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(UserRole)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        salt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserStatus\n\n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole, UserStatus } from \"@prisma/client\";\nimport { IsEmail, IsEnum, IsOptional, IsPhoneNumber, IsPositive, IsString } from \"class-validator\";\n\nexport class UserInput {\n    @IsEmail()\n    email: string;\n\n    @IsPhoneNumber()\n    phone: string\n\n    @IsString()\n    password: string\n\n    @IsEnum(UserRole)\n    role: UserRole;\n\n    status?: UserStatus;\n    salt?: string;    \n}\n\nexport class UserRoleEdit {\n    @IsEmail()\n    email: string;\n\n    @IsEnum(UserRole)\n    role: UserRole;\n}\n\nexport class UserStatusEdit {\n    @IsEmail()\n    email: string;\n\n    @IsEnum(UserStatus)\n    status: UserStatus;\n}\n\nexport class PaginationInput {\n    @IsPositive()\n    @IsOptional()\n    cursor?: number;\n\n    @IsPositive()\n    @IsOptional()\n    take?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRoleEdit.html":{"url":"classes/UserRoleEdit.html","title":"class - UserRoleEdit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRoleEdit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(UserRole)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole, UserStatus } from \"@prisma/client\";\nimport { IsEmail, IsEnum, IsOptional, IsPhoneNumber, IsPositive, IsString } from \"class-validator\";\n\nexport class UserInput {\n    @IsEmail()\n    email: string;\n\n    @IsPhoneNumber()\n    phone: string\n\n    @IsString()\n    password: string\n\n    @IsEnum(UserRole)\n    role: UserRole;\n\n    status?: UserStatus;\n    salt?: string;    \n}\n\nexport class UserRoleEdit {\n    @IsEmail()\n    email: string;\n\n    @IsEnum(UserRole)\n    role: UserRole;\n}\n\nexport class UserStatusEdit {\n    @IsEmail()\n    email: string;\n\n    @IsEnum(UserStatus)\n    status: UserStatus;\n}\n\nexport class PaginationInput {\n    @IsPositive()\n    @IsOptional()\n    cursor?: number;\n\n    @IsPositive()\n    @IsOptional()\n    take?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizeUser\n                            \n                            \n                                    Async\n                                changeUserRole\n                            \n                            \n                                    Async\n                                changeUserStatus\n                            \n                            \n                                    Async\n                                createAdmin\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUserByMail\n                            \n                            \n                                    Async\n                                user\n                            \n                            \n                                    Async\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizeUser(authData: AuthBodyDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authData\n                                            \n                                                            AuthBodyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeUserRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeUserRole(body: UserRoleEdit)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            UserRoleEdit\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeUserStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeUserStatus(body: UserStatusEdit)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            UserStatusEdit\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAdmin(admin: UserInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                admin\n                                            \n                                                            UserInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(data: UserInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            UserInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByMail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        user\n                        \n                    \n                \n            \n            \n                \n                        \n                    user(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        users\n                        \n                    \n                \n            \n            \n                \n                        \n                    users(cursor: number, take)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                cursor\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                take\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    MAX_PAGE_SIZE\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ForbiddenException, HttpException, HttpStatus, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { genSalt, hash, compare } from 'bcrypt';\nimport { AuthBodyDto } from \"src/auth/auth.dto\";\nimport { UserInput, UserRoleEdit, UserStatusEdit } from \"./user.dto\";\nimport { PrismaService } from \"src/prisma.service\";\nimport { User, UserStatus } from \"@prisma/client\";\nimport { IPayload } from \"src/token/token.model\";\n\nconst MAX_PAGE_SIZE = 10;\nconst USER_FIELDS_DISPLAY = {\n  id: true,\n  email: true,\n  phone: true,\n  role: true,\n  status: true,\n  salt: false,\n  password: false\n};\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) { }\n\n  async user(\n    id: number,\n  ): Promise {\n    return this.prisma.user.findUnique({\n      select: USER_FIELDS_DISPLAY,\n      where: {\n        id\n      },\n    });\n  }\n\n  async users(cursor = 1, take = MAX_PAGE_SIZE): Promise {\n    return this.prisma.user.findMany({\n      select: USER_FIELDS_DISPLAY,\n      cursor: { id: cursor },\n      take\n    });\n  }\n\n  async createUser(data: UserInput): Promise {\n    const existing = await this.prisma.user.findFirst({\n      where: {\n        OR: [\n          { email: data.email },\n          { phone: data.phone }\n        ]\n      }\n    });\n    if (existing) throw new BadRequestException(`User already exists with ${data.email} or phone ${data.phone}`);\n    try {\n      const salt = await genSalt(8);\n      data.password = await hash(data.password, salt)\n      data.salt = salt;\n      return await this.prisma.user.create({\n        data: data as User,\n      });\n    } catch (e) {\n      console.error(e)\n      throw new BadRequestException('Cannot create user');\n    }\n  }\n\n  async authorizeUser(authData: AuthBodyDto): Promise {\n    const userData = await this.prisma.user.findUnique({\n      where: {\n        email: authData.email\n      }\n    });\n    if (!userData) {\n      throw new UnauthorizedException({ message: 'Wrong user or password' })\n    }\n    if (userData.status === UserStatus.blocked) {\n      throw new ForbiddenException('The user has been blocked! Contact administrator');\n    }\n    const res = await compare(authData.password, userData.password);\n    if (res) return {\n      id: userData.id,\n      email: userData.email,\n      role: userData.role\n    }\n    else throw new UnauthorizedException({ message: 'Wrong user or password' });\n  }\n\n  async getUserByMail(email: string): Promise {\n    const userData = await this.prisma.user.findUnique({\n      where: {\n        email\n      }\n    });\n    if (!userData) {\n      throw new UnauthorizedException({ message: 'Wrong user or password' })\n    }\n    return {\n      id: userData.id,\n      email: userData.email,\n      role: userData.role\n    }\n  }\n\n  async changeUserRole(body: UserRoleEdit) {\n    try {\n      return await this.prisma.user.update({\n        select: USER_FIELDS_DISPLAY,\n        where: {\n          email: body.email\n        },\n        data: {\n          role: body.role\n        }\n      })\n    } catch (e) {\n      if (e.code === 'P2025') throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      throw e;\n    }\n  }\n\n  async changeUserStatus(body: UserStatusEdit) {\n    try {\n      return await this.prisma.user.update({\n        select: USER_FIELDS_DISPLAY,\n        where: {\n          email: body.email\n        },\n        data: {\n          status: body.status\n        }\n      })\n    } catch (e) {\n      if (e.code === 'P2025') throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      throw e;\n    }\n  }\n\n  async deleteUser(id: number) {\n    try {\n      return await this.prisma.user.delete({\n        select: USER_FIELDS_DISPLAY,\n        where: { id }\n      })\n    } catch (e) {\n      if (e.code === 'P2025') throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      throw e;\n    }\n  }\n\n  async createAdmin(admin: UserInput) {\n    const salt = await genSalt(8);\n    admin.password = await hash(admin.password, salt)\n    admin.salt = salt;\n    await this.prisma.user.upsert({\n      where: {\n        email: admin.email\n      },\n      create: admin as User,\n      update: admin\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserStatusEdit.html":{"url":"classes/UserStatusEdit.html","title":"class - UserStatusEdit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserStatusEdit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(UserStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole, UserStatus } from \"@prisma/client\";\nimport { IsEmail, IsEnum, IsOptional, IsPhoneNumber, IsPositive, IsString } from \"class-validator\";\n\nexport class UserInput {\n    @IsEmail()\n    email: string;\n\n    @IsPhoneNumber()\n    phone: string\n\n    @IsString()\n    password: string\n\n    @IsEnum(UserRole)\n    role: UserRole;\n\n    status?: UserStatus;\n    salt?: string;    \n}\n\nexport class UserRoleEdit {\n    @IsEmail()\n    email: string;\n\n    @IsEnum(UserRole)\n    role: UserRole;\n}\n\nexport class UserStatusEdit {\n    @IsEmail()\n    email: string;\n\n    @IsEnum(UserStatus)\n    status: UserStatus;\n}\n\nexport class PaginationInput {\n    @IsPositive()\n    @IsOptional()\n    cursor?: number;\n\n    @IsPositive()\n    @IsOptional()\n    take?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            variable\n            ADMIN_DATA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            AuthBodyDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            RefreshBodyDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            TokenBodyDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/codes/codes.service.ts\n            \n            injectable\n            CodesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/codes/codes.service.ts\n            \n            variable\n            CODE_VALIDITY_SECONDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/codes/codes.service.ts\n            \n            variable\n            MAX_CODE_CREATION_TRIAL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/codes/codes.service.ts\n            \n            variable\n            MAX_OTPS_PER_USER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guards/admin-activate.guard.ts\n            \n            guard\n            AdminActivateGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guards/moderator-activate-guard.ts\n            \n            guard\n            ModeratorActivateGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guards/user-activate.guard.ts\n            \n            guard\n            UserActivateGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/news/news.controller.ts\n            \n            controller\n            NewsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/news/news.dto.ts\n            \n            class\n            NewsInputDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/news/news.dto.ts\n            \n            class\n            NewsModificationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/news/news.dto.ts\n            \n            class\n            NewsPagination\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/news/news.service.ts\n            \n            injectable\n            NewsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/news/news.service.ts\n            \n            variable\n            MAX_TAKE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/token/token.model.ts\n            \n            interface\n            IPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/token/token.model.ts\n            \n            interface\n            IToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/token/token.service.ts\n            \n            injectable\n            TokenService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            PaginationInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            UserInput\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            UserRoleEdit\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            UserStatusEdit\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            variable\n            MAX_PAGE_SIZE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            variable\n            USER_FIELDS_DISPLAY\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/schedule : ^4.0.0\n        \n            @prisma/client : ^5.7.1\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/moment : ^2.13.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            jsonwebtoken : ^9.0.2\n        \n            moment : ^2.29.4\n        \n            prisma : ^5.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TokenType   (src/.../token.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/token/token.model.ts\n    \n        \n            \n                \n                    \n                        \n                        TokenType\n                    \n                \n                        \n                            \n                                 standard\n                            \n                        \n                        \n                            \n                                 refresh\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNews Service\nМеня зовут Патрик Строньский и это моя имполементация News Service реализован как тестовое задание для компании NeoTech\nАрхитектура\nСервис сделан используя docker-compose. Сделан используя два контейнера, где первый заключает в себе сервис (сделан используя NestJs) а второй базу данных PostgreSQL. \nКак запустить\nЧтобы запустить сервис достаточно исользовать две команды:\nЧтобы построить контейнера:\n$ docker-compose build\nЧтобы запустить сервис:\n$ docker-compose up\nКак тестировать\nВо первых, автоматически создаётся первый пользователь. Его email это \"admin@admin.admin\" а его пароль \"admin\". Он используется для входа в систему. Сначала надо получить токен для входа в систему а позже можно использовать обычное апи.\nПолучение кода авторизации\nВо первых, для входа в систему надо получить код авторизации. Чтобы его получить Надо отправить запрос на http://localhost:3000/auth/auth\nТело запроса: { email: 'admin@admin.admin', password: 'admin' }. Код будет виден в терминале где запущенное NestJS приложение. Его надо скопировать. Позже надо отправить запрос на: http://localhost:3000/auth/token\nТело запроса: { email: 'admin@admin.admin', password: 'admin' code: ''}\nВ ответ отправляется токен и токен обновления (refresh token).\nПолучение обновления токена\nЧтобы получить обновленный токен надо отправить запрос на: http://localhost:3000/auth/refresh\nТокен обновления (refresh token) получается вместе со стандартным токеном.\nТело запроса: { email: 'admin@admin.admin', refresh:  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCodesService\n\nCodesService\n\nAppModule -->\n\nCodesService->AppModule\n\n\n\n\n\nNewsService\n\nNewsService\n\nAppModule -->\n\nNewsService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAppModule -->\n\nTokenService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ADMIN_DATA   (src/.../app.service.ts)\n                        \n                        \n                            CODE_VALIDITY_SECONDS   (src/.../codes.service.ts)\n                        \n                        \n                            MAX_CODE_CREATION_TRIAL   (src/.../codes.service.ts)\n                        \n                        \n                            MAX_OTPS_PER_USER   (src/.../codes.service.ts)\n                        \n                        \n                            MAX_PAGE_SIZE   (src/.../user.service.ts)\n                        \n                        \n                            MAX_TAKE   (src/.../news.service.ts)\n                        \n                        \n                            USER_FIELDS_DISPLAY   (src/.../user.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ADMIN_DATA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  email: 'admin@admin.admin',\n  phone: '+99812312312',\n  password: 'admin',\n  role: UserRole.admin,\n  status: UserStatus.active,\n}\n                    \n                \n\n\n        \n    \n\n    src/codes/codes.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CODE_VALIDITY_SECONDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 120\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_CODE_CREATION_TRIAL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_OTPS_PER_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5\n                    \n                \n\n\n        \n    \n\n    src/user/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MAX_PAGE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_FIELDS_DISPLAY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: true,\n  email: true,\n  phone: true,\n  role: true,\n  status: true,\n  salt: false,\n  password: false\n}\n                    \n                \n\n\n        \n    \n\n    src/news/news.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MAX_TAKE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
